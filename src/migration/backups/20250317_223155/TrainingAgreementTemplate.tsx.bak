import React, { useRef, useEffect, useState } from 'react';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import SafeImage from '../../../shared/SafeImage';
import { addCacheBuster, isValidImageUrl, normalizeSupabaseUrl, getAntiCacheSignatureUrl } from '../../../../utils/SignatureUtils';

/**
 * Template unifi√© pour les conventions de formation
 * 
 * Ce template remplace les deux templates existants:
 * - /src/components/templates/TrainingAgreementTemplate.tsx
 * - /src/components/shared/templates/TrainingAgreementTemplate.tsx
 * 
 * Il r√©sout le probl√®me des signatures dupliqu√©es et standardise la gestion
 * des signatures dans les documents.
 */

// Props standardis√©es pour le template unifi√©
export interface UnifiedTrainingAgreementTemplateProps {
  // Donn√©es du stagiaire
  participant: {
    id: string;
    first_name: string;
    last_name: string;
    job_position?: string;
    company?: string;
    email?: string;
    phone?: string;
    status?: string;
    is_minor?: boolean;
    representative_name?: string;
    signature_url?: string | null;
  };
  
  // Donn√©es de la formation
  training: {
    id: string;
    title: string;
    duration: string;
    trainer_name: string;
    trainer_details?: string;
    location: string | { name: string; city?: string };
    start_date: string | null;
    end_date: string | null;
    objectives?: string[];
    content?: string;
    price?: number | null;
    evaluation_methods?: {
      profile_evaluation?: boolean;
      skills_evaluation?: boolean;
      knowledge_evaluation?: boolean;
      satisfaction_survey?: boolean;
    };
    tracking_methods?: {
      attendance_sheet?: boolean;
      completion_certificate?: boolean;
    };
    pedagogical_methods?: {
      needs_evaluation?: boolean;
      theoretical_content?: boolean;
      practical_exercises?: boolean;
      case_studies?: boolean;
      experience_sharing?: boolean;
      digital_support?: boolean;
    };
    material_elements?: {
      computer_provided?: boolean;
      pedagogical_material?: boolean;
      digital_support_provided?: boolean;
      computer?: boolean;
      projector?: boolean;
      whiteboard?: boolean;
      documentation?: boolean;
    };
    trainer_signature_url?: string | null;
  };
  
  // Donn√©es de l'entreprise (optionnelles)
  company?: {
    name: string;
    address?: string;
    postal_code?: string;
    city?: string;
    country?: string;
    siret?: string;
    contact_name?: string;
    contact_email?: string;
    contact_phone?: string;
  };
  
  // Param√®tres de l'organisme de formation
  organizationSettings?: {
    organization_name: string;
    siret?: string;
    address?: string;
    postal_code?: string;
    city?: string;
    country?: string;
    representative_name?: string;
    representative_title?: string;
    activity_declaration_number?: string;
  };
  
  // Donn√©es de signatures
  participantSignature?: string | null;
  representativeSignature?: string | null;
  trainerSignature?: string | null;
  
  // Options d'affichage
  documentVariant?: 'student' | 'company' | 'generic';
  viewContext?: 'crm' | 'student' | 'admin' | 'generic';
  pdfMode?: boolean;
  hideParticipantSignatureSection?: boolean;
  showTrainerSignature?: boolean;
  showCompanySignature?: boolean;
  
  // Callbacks
  onRenderComplete?: () => void;
}

// D√©finition des param√®tres par d√©faut pour l'organisation
const DEFAULT_ORGANIZATION_SETTINGS = {
  organization_name: 'PETITMAKER',
  address: 'N/A',
  siret: 'N/A',
  activity_declaration_number: 'N/A',
};

/**
 * Template unifi√© pour les conventions de formation
 * 
 * Cette version r√©sout les probl√®mes des signatures et remplace les deux templates existants.
 */
export const UnifiedTrainingAgreementTemplate: React.FC<UnifiedTrainingAgreementTemplateProps> = ({
  participant,
  training,
  company = { name: '' },
  organizationSettings = DEFAULT_ORGANIZATION_SETTINGS,
  participantSignature,
  representativeSignature,
  trainerSignature,
  documentVariant = 'student',
  viewContext = 'crm',
  pdfMode = false,
  hideParticipantSignatureSection = false,
  showTrainerSignature = true,
  showCompanySignature = true,
  onRenderComplete
}) => {
  const documentRef = useRef<HTMLDivElement>(null);
  const [signaturesInitialized, setSignaturesInitialized] = useState(false);
  const [isPreloadingSignatures, setIsPreloadingSignatures] = useState(false);
  
  // Utiliser la signature du participant d√©j√† pr√©sente dans l'objet participant si disponible
  const effectiveParticipantSignature = participant.signature_url || participantSignature;
  // Utiliser la signature du formateur d√©j√† pr√©sente dans l'objet training si disponible
  const effectiveTrainerSignature = training.trainer_signature_url || trainerSignature;
  
  // Fonction pour ajouter des param√®tres anti-cache aux URLs
  const getAntiCacheSignatureUrl = (url: string | null | undefined): string => {
    return SignatureUtils.addAntiCacheToUrl(url);
  };
  
  // Fonctions utilitaires pour les dates
  const formatDate = (dateString: string | null) => {
    if (!dateString) return '';
    try {
      const date = new Date(dateString);
      return format(date, 'dd/MM/yyyy', { locale: fr });
    } catch (e) {
      console.error('Erreur de formatage de date:', e);
      return dateString;
    }
  };

  const getCurrentDate = () => {
    return format(new Date(), 'dd MMMM yyyy', { locale: fr });
  };

  const getTrainingDates = () => {
    const startDate = formatDate(training.start_date);
    const endDate = formatDate(training.end_date);
    
    if (startDate && endDate && startDate !== endDate) {
      return `du ${startDate} au ${endDate}`;
    } else if (startDate) {
      return `le ${startDate}`;
    } else {
      return 'Dates √† d√©finir';
    }
  };
  
  // Fonctions pour obtenir les donn√©es du document
  const getObjectives = () => {
    if (Array.isArray(training.objectives) && training.objectives.length > 0) {
      return training.objectives;
    }
    return ['Objectifs √† d√©finir'];
  };

  const getEvaluationMethods = () => {
    const methods = [];
    
    if (training.evaluation_methods?.profile_evaluation) methods.push("√âvaluation du profil avant formation");
    if (training.evaluation_methods?.skills_evaluation) methods.push("√âvaluation des comp√©tences acquises");
    if (training.evaluation_methods?.knowledge_evaluation) methods.push("√âvaluation des connaissances");
    if (training.evaluation_methods?.satisfaction_survey) methods.push("Questionnaire de satisfaction");
    
    return methods.length > 0 ? methods : ["√âvaluation √† d√©finir"];
  };

  const getPedagogicalMethods = () => {
    const methods = [];
    
    if (training.pedagogical_methods?.needs_evaluation) methods.push("√âvaluation des besoins");
    if (training.pedagogical_methods?.theoretical_content) methods.push("Apports th√©oriques");
    if (training.pedagogical_methods?.practical_exercises) methods.push("Exercices pratiques");
    if (training.pedagogical_methods?.case_studies) methods.push("√âtudes de cas");
    if (training.pedagogical_methods?.experience_sharing) methods.push("Partage d'exp√©rience");
    if (training.pedagogical_methods?.digital_support) methods.push("Support num√©rique");
    
    return methods.length > 0 ? methods : ["M√©thodes p√©dagogiques √† d√©finir"];
  };

  const getMaterialElements = () => {
    const elements = [];
    
    if (training.material_elements?.computer_provided) elements.push("Ordinateur fourni");
    if (training.material_elements?.pedagogical_material) elements.push("Mat√©riel p√©dagogique");
    if (training.material_elements?.digital_support_provided) elements.push("Support num√©rique fourni");
    if (training.material_elements?.computer) elements.push("Ordinateur");
    if (training.material_elements?.projector) elements.push("Vid√©oprojecteur");
    if (training.material_elements?.whiteboard) elements.push("Tableau blanc");
    if (training.material_elements?.documentation) elements.push("Documentation");
    
    return elements.length > 0 ? elements : ["√âl√©ments mat√©riels √† d√©finir"];
  };
  
  // Configurer les conteneurs de signature et supprimer les sections ind√©sirables
  const setupSignatureContainers = () => {
    if (!documentRef.current) return;
    
    console.log('üîß [UnifiedTemplate] Configuration des conteneurs de signature');
    console.log('üîß [UnifiedTemplate] hideParticipantSignatureSection:', hideParticipantSignatureSection);
    
    // Supprimer les sections "Signature du participant" ind√©sirables
    // mais pas celles dans notre template unifi√©
    SignatureUtils.removeAllParticipantSignatureSections(documentRef.current);
    
    // Configurer les conteneurs pour chaque type de signature
    if (documentVariant === 'student' || viewContext === 'student') {
      // Pour le cas o√π la signature du participant doit √™tre affich√©e
      if (!hideParticipantSignatureSection) {
        const participantContainer = SignatureUtils.setupSignatureContainer(documentRef.current, 'participant', 'Pour le stagiaire');
        console.log('üîß [UnifiedTemplate] Container participant configur√©:', !!participantContainer);
      } else {
        console.log('üîß [UnifiedTemplate] La section de signature du participant est masqu√©e par configuration');
        
        // S'assurer que la section est visuellement masqu√©e si hideParticipantSignatureSection est true
        const section = documentRef.current.querySelector('#participant-signature-section');
        if (section) {
          (section as HTMLElement).style.display = 'none';
        }
      }
    }
    
    if (showTrainerSignature) {
      const trainerContainer = SignatureUtils.setupSignatureContainer(documentRef.current, 'trainer', 'Pour l\'organisme de formation');
      console.log('üîß [UnifiedTemplate] Container formateur configur√©:', !!trainerContainer);
    }
    
    if (showCompanySignature) {
      const companyContainer = SignatureUtils.setupSignatureContainer(documentRef.current, 'company', 'Pour l\'entreprise');
      console.log('üîß [UnifiedTemplate] Container entreprise configur√©:', !!companyContainer);
    }
    
    // Confirmer que l'initialisation est termin√©e
    setSignaturesInitialized(true);
    
    // Log pour v√©rifier l'√©tat apr√®s configuration
    console.log('üîß [UnifiedTemplate] Conteneurs configur√©s - hideParticipantSignatureSection:', hideParticipantSignatureSection);
    console.log('üîß [UnifiedTemplate] Conteneurs configur√©s - Statut de signaturesInitialized:', true);
  };
  
  // Pr√©charger les images de signature
  const preloadSignatures = async () => {
    if (!documentRef.current || !signaturesInitialized) return;
    
    console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement des images de signature');
    console.log('üñºÔ∏è [UnifiedTemplate] hideParticipantSignatureSection:', hideParticipantSignatureSection);
    console.log('üñºÔ∏è [UnifiedTemplate] Signatures URLs:', {
      participant: effectiveParticipantSignature,
      representative: representativeSignature,
      trainer: effectiveTrainerSignature
    });
    
    setIsPreloadingSignatures(true);
    
    try {
      // Pr√©charger les signatures seulement si elles existent et si les sections correspondantes doivent √™tre affich√©es
      if (effectiveParticipantSignature && !hideParticipantSignatureSection) {
        // V√©rifier d'abord que le conteneur de signature est visible
        const participantSection = documentRef.current.querySelector('#participant-signature-section');
        if (participantSection && (participantSection as HTMLElement).style.display !== 'none') {
          console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement de la signature du participant');
          
          const success = SignatureUtils.preloadSignatureImage(
            effectiveParticipantSignature, 
            'participant', 
            documentRef.current
          );
          
          console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement signature participant:', success ? 'r√©ussi' : '√©chou√©');
        } else {
          console.log('üñºÔ∏è [UnifiedTemplate] Section participant non visible, signature non pr√©charg√©e');
        }
      }
      
      if (representativeSignature && showTrainerSignature) {
        console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement de la signature du repr√©sentant');
        
        const success = SignatureUtils.preloadSignatureImage(
          representativeSignature, 
          'trainer', 
          documentRef.current
        );
        
        console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement signature repr√©sentant:', success ? 'r√©ussi' : '√©chou√©');
      }
      
      if (effectiveTrainerSignature && showTrainerSignature) {
        console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement de la signature du formateur');
        
        const success = SignatureUtils.preloadSignatureImage(
          effectiveTrainerSignature, 
          'trainer', 
          documentRef.current
        );
        
        console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement signature formateur:', success ? 'r√©ussi' : '√©chou√©');
      }
    } catch (error) {
      console.error('Erreur lors du pr√©chargement des signatures:', error);
    } finally {
      setIsPreloadingSignatures(false);
      console.log('üñºÔ∏è [UnifiedTemplate] Pr√©chargement des signatures termin√©');
    }
  };
  
  // Initialisation une fois le composant mont√©
  useEffect(() => {
    console.log('üöÄ [UnifiedTemplate] Initialisation du template unifi√©');
    console.log('üìä [UnifiedTemplate] Variante:', documentVariant, 'Contexte:', viewContext);
    
    // Configurer les conteneurs de signature
    setupSignatureContainers();
  }, [documentVariant, viewContext, hideParticipantSignatureSection, 
      showTrainerSignature, showCompanySignature]);
  
  // Pr√©charger les signatures une fois les conteneurs configur√©s
  useEffect(() => {
    if (signaturesInitialized) {
      preloadSignatures();
    }
  }, [signaturesInitialized, effectiveParticipantSignature, 
      representativeSignature, effectiveTrainerSignature]);
  
  // Notifier que le rendu est termin√©
  useEffect(() => {
    console.log('üìÇ [DEBUG] UnifiedTrainingAgreementTemplate charg√©');
    
    if (!isPreloadingSignatures && onRenderComplete) {
      // Permettre au DOM d'√™tre mis √† jour
      const timer = setTimeout(() => {
        onRenderComplete();
      }, 300);
      
      return () => clearTimeout(timer);
    }
  }, [isPreloadingSignatures, onRenderComplete]);
  
  // Pr√©parer les donn√©es pour le template
  const objectives = getObjectives();
  const evaluationMethods = getEvaluationMethods();
  const pedagogicalMethods = getPedagogicalMethods();
  const materialElements = getMaterialElements();
  
  // Formatage des dates pour affichage
  const formattedStartDate = training.start_date 
    ? format(new Date(training.start_date), 'dd MMMM yyyy', { locale: fr }) 
    : 'Non d√©finie';
  const formattedEndDate = training.end_date 
    ? format(new Date(training.end_date), 'dd MMMM yyyy', { locale: fr }) 
    : 'Non d√©finie';
  
  return (
    <div 
      ref={documentRef}
      className={`bg-white p-8 shadow-sm border border-gray-200 mx-auto unified-training-agreement ${pdfMode ? 'pdf-mode' : ''}`} 
      style={{ maxWidth: '800px' }}
      data-template-variant={documentVariant}
      data-view-context={viewContext}
    >
      <div className="text-center mb-8">
        <h1 className="text-2xl font-bold mb-2">CONVENTION DE FORMATION PROFESSIONNELLE</h1>
        <p className="text-sm text-gray-600">(Articles L.6353-1 du Code du travail)</p>
      </div>
      
      <div className="mb-6">
        <p><strong>Entre</strong></p>
        <p>L'organisme de formation : {organizationSettings.organization_name || 'PETITMAKER'}</p>
        <p>Num√©ro de d√©claration d'activit√© de formation : {organizationSettings.activity_declaration_number || 'N/A'}</p>
        <p>Num√©ro SIRET de l'organisme de formation : {organizationSettings.siret || 'N/A'}</p>
        <p>Adresse de l'organisme de formation : {organizationSettings.address || 'N/A'}</p>
      </div>
      
      <div className="mb-6">
        <p><strong>Et</strong></p>
        <p>L'entreprise : {company?.name || participant.company || 'Entreprise du stagiaire'}</p>
        <p>Adresse de l'entreprise : {company?.address || 'N/A'}{company?.postal_code && company?.city ? `, ${company.postal_code} ${company.city}` : ''}</p>
        <p>SIRET de l'entreprise : {company?.siret || 'N/A'}</p>
        {company?.contact_name && <p>Repr√©sentant : {company.contact_name}</p>}
      </div>
      
      <div className="mb-6">
        <p>Pour le(s) b√©n√©ficiaire(s) : (ci-apr√®s d√©nomm√©(s) le(s) stagiaire(s))</p>
        <table className="w-full border mt-2">
          <tbody>
            <tr>
              <th className="border p-2 text-center">Stagiaire</th>
              <th className="border p-2 text-center">Fonction</th>
            </tr>
            <tr>
              <td className="border p-2 text-center">{participant.first_name} {participant.last_name}</td>
              <td className="border p-2 text-center">{participant.job_position || 'N/A'}</td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <div className="mb-6">
        <h2 className="text-lg font-bold mb-2">1. Objet, nature et dur√©e de la formation</h2>
        <p>Le b√©n√©ficiaire suivra la formation suivante :</p>
        <p><strong>Intitul√© :</strong> {training.title}</p>
        <p><strong>Objectifs :</strong></p>
        <ul className="list-disc pl-6 mb-2">
          {objectives.map((objective, index) => (
            <li key={index}>{objective}</li>
          ))}
        </ul>
        <p><strong>Type d'action :</strong> Action de formation</p>
        <p><strong>Dur√©e :</strong> {training.duration}</p>
        <p><strong>Dates :</strong> {getTrainingDates()}</p>
        <p><strong>Lieu :</strong> {typeof training.location === 'string' ? training.location : (training.location.name + (training.location.city ? `, ${training.location.city}` : ''))}</p>
      </div>
      
      <div className="mb-6">
        <h2 className="text-lg font-bold mb-2">2. M√©thodes p√©dagogiques, contenu et supports</h2>
        <p><strong>M√©thodes p√©dagogiques :</strong></p>
        <ul className="list-disc pl-6 mb-2">
          {pedagogicalMethods.map((method, index) => (
            <li key={index}>{method}</li>
          ))}
        </ul>
        
        <p><strong>Moyens techniques :</strong></p>
        <ul className="list-disc pl-6 mb-2">
          {materialElements.map((element, index) => (
            <li key={index}>{element}</li>
          ))}
        </ul>
        
        <p><strong>Modalit√©s d'√©valuation :</strong></p>
        <ul className="list-disc pl-6 mb-2">
          {evaluationMethods.map((method, index) => (
            <li key={index}>{method}</li>
          ))}
        </ul>
      </div>
      
      <div className="mb-6">
        <h2 className="text-lg font-bold mb-2">3. Dispositions financi√®res</h2>
        <p><strong>Prix de la formation :</strong> {training.price ? `${training.price} ‚Ç¨ HT` : '√Ä d√©finir'}</p>
      </div>
      
      <div className="mb-6">
        <h2 className="text-lg font-bold mb-2">4. Modalit√©s de d√©roulement et de suivi</h2>
        <p>Les horaires de formation sont d√©finis par l'organisme de formation.</p>
        <p>Une feuille de pr√©sence doit √™tre sign√©e par le stagiaire et le formateur par demi-journ√©e de formation.</p>
        <p>Une attestation de fin de formation est remise au stagiaire √† l'issue de la formation.</p>
      </div>
      
      <div className="mb-6">
        <h2 className="text-lg font-bold mb-2">5. Non-r√©alisation ou abandon</h2>
        <p>En cas d'annulation par l'entreprise avant le d√©but de la formation, des indemnit√©s compensatrices seront dues selon les conditions suivantes :</p>
        <ul className="list-disc pl-6 mb-2">
          <li>Annulation √† plus de 30 jours calendaires avant le d√©but de la formation : aucune indemnit√©</li>
          <li>Annulation entre 30 et 15 jours calendaires avant le d√©but de la formation : 30% du co√ªt total</li>
          <li>Annulation √† moins de 15 jours calendaires avant le d√©but de la formation : 50% du co√ªt total</li>
          <li>Annulation le jour m√™me ou non pr√©sentation du stagiaire : 100% du co√ªt total</li>
        </ul>
      </div>
      
      {/* Section de signature standardis√©e avec identification explicite */}
      <div className="flex justify-between mt-12 signatures-section" id="unified-signatures-section" data-unified-signatures="true">
        {/* Signature de l'organisme de formation */}
        <div className="w-1/2">
          <p><strong>Pour l'organisme de formation</strong></p>
          <p className="mt-2">Nom et qualit√© du signataire</p>
          <div 
            className="mt-2 h-28 border border-gray-300 relative" 
            id="trainer-signature-container" 
            data-signature-container="trainer" 
            data-signature-type="trainer"
          >
            {representativeSignature ? (
              <div className="w-full h-full flex flex-col items-center justify-center overflow-hidden" data-signature-wrapper="trainer">
                <SafeImage 
                  src={getAntiCacheSignatureUrl(representativeSignature)} 
                  alt="Signature du repr√©sentant" 
                  className="max-h-20 max-w-[95%] object-contain"
                  id="representative-signature-img"
                  data-signature-image="trainer"
                  data-signature-src={representativeSignature}
                />
              </div>
            ) : (
              <div className="w-full h-full flex items-center justify-center bg-gray-50">
                <p className="text-gray-400 italic text-center" data-signature-placeholder="trainer">Signature en attente</p>
              </div>
            )}
          </div>
        </div>
        
        {/* Signature du participant/stagiaire - avec visibilit√© conditionnelle bas√©e sur hideParticipantSignatureSection */}
        <div className="w-1/2" id="participant-signature-section" data-participant-signature-section={hideParticipantSignatureSection ? "hidden" : "visible"}>
          <p><strong>Pour le stagiaire</strong></p>
          <p className="mt-2">Nom : {participant.first_name} {participant.last_name}</p>
          
          <div 
            className="mt-2 h-28 border border-gray-300 relative" 
            id="stagiaire-signature-container" 
            data-signature-container="participant" 
            data-signature-type="participant"
          >
            {effectiveParticipantSignature ? (
              <div className="w-full h-full flex flex-col items-center justify-center overflow-hidden" data-signature-wrapper="participant">
                <SafeImage 
                  src={getAntiCacheSignatureUrl(effectiveParticipantSignature)} 
                  alt="Signature du stagiaire" 
                  className="max-h-20 max-w-[95%] object-contain"
                  id="stagiaire-signature-img"
                  data-signature-image="participant"
                  data-signature-src={effectiveParticipantSignature}
                />
              </div>
            ) : (
              <div className="w-full h-full flex items-center justify-center bg-gray-50">
                <p className="text-gray-400 italic text-center" data-signature-placeholder="participant">Signature en attente</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Message explicite indiquant l'absence de section "Signature du participant" en bas */}
      <div className="text-xs text-gray-400 mt-4 mb-4 text-center" data-signature-notice="true">
        {hideParticipantSignatureSection 
          ? "La section de signature du participant n'est pas affich√©e en bas du document pour √©viter les doublons." 
          : ""}
      </div>
      
      <div className="text-center text-xs text-gray-500 mt-8">
        <p>Date d'√©dition : {getCurrentDate()}</p>
      </div>
    </div>
  );
};

export default UnifiedTrainingAgreementTemplate; 