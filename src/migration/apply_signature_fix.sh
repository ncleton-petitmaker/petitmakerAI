#!/bin/bash

# Script de correction automatique des probl√®mes de signature
# Ce script applique les corrections pour la gestion des signatures dans les templates

echo "üõ†Ô∏è D√©but de l'application des correctifs pour les signatures..."

# Dossier de base du projet
BASE_DIR="$(pwd)"
echo "üìÇ Dossier de travail: $BASE_DIR"

# V√©rifier que nous sommes bien dans le bon dossier
if [[ ! -d "$BASE_DIR/src" ]]; then
  echo "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet."
  exit 1
fi

# Cr√©er un r√©pertoire pour les backups
BACKUP_DIR="$BASE_DIR/src/migration/backups/$(date +'%Y%m%d_%H%M%S')"
mkdir -p "$BACKUP_DIR"
echo "üìÇ Dossier de backup cr√©√©: $BACKUP_DIR"

# Fonction pour faire un backup d'un fichier avant de le modifier
backup_file() {
  local file="$1"
  local backup_file="$BACKUP_DIR/$(basename "$file").bak"
  cp "$file" "$backup_file"
  echo "üíæ Backup effectu√©: $backup_file"
}

# 1. Corriger le template unifi√©
TEMPLATE_FILE="$BASE_DIR/src/components/shared/templates/unified/TrainingAgreementTemplate.tsx"
if [[ -f "$TEMPLATE_FILE" ]]; then
  echo "üîç Traitement du template unifi√©..."
  backup_file "$TEMPLATE_FILE"
  
  # V√©rifier si les modifications ont d√©j√† √©t√© appliqu√©es
  if grep -q "signatures-section-debug" "$TEMPLATE_FILE"; then
    echo "‚úÖ Le template unifi√© a d√©j√† √©t√© corrig√©."
  else
    # Appliquer les modifications
    sed -i '' 's/className="flex justify-between mt-12 signatures-section"/className="flex justify-between mt-12 signatures-section" id="unified-signatures-section" data-unified-signatures="true"/g' "$TEMPLATE_FILE"
    sed -i '' 's/<div className="w-1\/2">/<div className="w-1\/2" id="participant-signature-section" data-participant-signature-section={hideParticipantSignatureSection ? "hidden" : "visible"}>/g' "$TEMPLATE_FILE"
    
    # Ajouter la section d'information
    sed -i '' '/{\/\* IMPORTANT: Plus de section "Signature du participant" en bas du document \*\/}/c\
      {\/\* Message explicite indiquant l'\''absence de section "Signature du participant" en bas \*\/}\
      <div className="text-xs text-gray-400 mt-4 mb-4 text-center" data-signature-notice="true">\
        {hideParticipantSignatureSection \
          ? "La section de signature du participant n'\''est pas affich√©e en bas du document pour √©viter les doublons." \
          : ""}\
      </div>
    ' "$TEMPLATE_FILE"
    
    echo "‚úÖ Template unifi√© corrig√©."
  fi
else
  echo "‚ùå Erreur: Template unifi√© non trouv√©: $TEMPLATE_FILE"
fi

# 2. Corriger les fonctions de SignatureUtils
SIGNATURE_UTILS_FILE="$BASE_DIR/src/utils/SignatureUtils.ts"
if [[ -f "$SIGNATURE_UTILS_FILE" ]]; then
  echo "üîç Traitement des utilitaires de signature..."
  backup_file "$SIGNATURE_UTILS_FILE"
  
  # V√©rifier si les modifications ont d√©j√† √©t√© appliqu√©es
  if grep -q "isInProtectedSection" "$SIGNATURE_UTILS_FILE"; then
    echo "‚úÖ Les utilitaires de signature ont d√©j√† √©t√© corrig√©s."
  else
    # Cr√©er un fichier temporaire avec les modifications
    TMP_FILE=$(mktemp)
    
    # Remplacer la fonction removeAllParticipantSignatureSections
    cat > "$TMP_FILE" << 'EOF'
/**
 * Supprime toutes les sections intitul√©es "Signature du participant" d'un document
 * en pr√©servant celles qui sont explicitement plac√©es dans les templates unifi√©s
 * 
 * @param container √âl√©ment DOM contenant le document
 * @returns Nombre de sections supprim√©es
 */
export const removeAllParticipantSignatureSections = (container: HTMLElement): number => {
  if (!container) {
    console.log('üîç [DEBUG] removeAllParticipantSignatureSections: Aucun conteneur fourni');
    return 0;
  }

  console.log('üîç [DEBUG] Suppression des sections "Signature du participant" ind√©sirables');
  let removedCount = 0;

  // √âtape 1: V√©rifier si on est dans un template unifi√©
  const isUnifiedTemplate = container.classList.contains('unified-training-agreement');
  console.log(`üîç [DEBUG] Est-ce un template unifi√©? ${isUnifiedTemplate}`);
  
  // √âtape 2: Trouver tous les n≈ìuds de texte contenant "Signature du participant"
  const allTextNodes = getAllTextNodes(container);
  const signatureNodes = allTextNodes.filter(
    node => node.textContent && node.textContent.trim() === 'Signature du participant'
  );

  // √âtape 3: Pour chaque occurrence, supprimer la section parente appropri√©e
  signatureNodes.forEach(node => {
    // V√©rifier si ce n≈ìud est dans la section "Pour le stagiaire" ou signatures-section
    let isInProtectedSection = false;
    let currentNode: Node | null = node;
    
    // Remonter jusqu'√† 5 niveaux pour chercher un titre ou une classe prot√©g√©e
    for (let i = 0; i < 5 && currentNode; i++) {
      if (currentNode.nodeType === Node.ELEMENT_NODE) {
        const element = currentNode as HTMLElement;
        // V√©rifier les classes et attributs qui indiquent qu'il s'agit d'une section l√©gitime
        if (
          element.classList?.contains('signatures-section') ||
          element.hasAttribute('data-signature-container') ||
          element.hasAttribute('data-signature-type')
        ) {
          isInProtectedSection = true;
          break;
        }
      }
      
      // Si un parent contient le texte "Pour le stagiaire", ne pas supprimer
      if (currentNode.textContent && (
          currentNode.textContent.includes('Pour le stagiaire') ||
          currentNode.textContent.includes('Pour l\'entreprise') ||
          currentNode.textContent.includes('Pour l\'organisme de formation')
      )) {
        isInProtectedSection = true;
        break;
      }
      currentNode = currentNode.parentNode;
    }

    if (!isInProtectedSection) {
      // Trouver le parent √† supprimer (div, section, etc.)
      let target = node.parentElement;
      let foundTarget = false;
      
      // Remonter jusqu'√† 5 niveaux pour trouver une section ou div
      for (let i = 0; i < 5 && target; i++) {
        // Si c'est un √©l√©ment qui ressemble √† une section compl√®te
        if (
          target.tagName === 'DIV' || 
          target.tagName === 'SECTION' ||
          (target.className && (
            target.className.includes('signature') ||
            target.className.includes('mt-') ||
            target.className.includes('border-t')
          ))
        ) {
          foundTarget = true;
          break;
        }
        target = target.parentElement;
      }

      if (foundTarget && target) {
        console.log(`üîç [DEBUG] Suppression d'une section "Signature du participant": ${target.tagName}`);
        // Masquer d'abord, puis vider, puis supprimer
        (target as HTMLElement).style.display = 'none';
        target.innerHTML = '';
        if (target.parentElement) {
          target.parentElement.removeChild(target);
        }
        removedCount++;
      }
    } else {
      console.log('üîç [DEBUG] Section de signature d√©tect√©e dans une zone prot√©g√©e, conservation');
    }
  });

  // √âtape 4: Chercher aussi par attributs data, mais √©pargner les containers l√©gitimes
  const dataSignatureElements = container.querySelectorAll('[data-signature-type="participant"]');
  dataSignatureElements.forEach(element => {
    // V√©rifier si cet √©l√©ment est dans un conteneur prot√©g√©
    let isInProtectedSection = false;
    
    // V√©rifier si l'√©l√©ment lui-m√™me est un conteneur l√©gitime
    if (element.hasAttribute('data-signature-container')) {
      isInProtectedSection = true;
    } else {
      let currentNode: Node | null = element;
      
      // Remonter jusqu'√† 5 niveaux pour chercher un conteneur prot√©g√©
      for (let i = 0; i < 5 && currentNode; i++) {
        if (currentNode.nodeType === Node.ELEMENT_NODE) {
          const parentElement = currentNode as HTMLElement;
          if (
            parentElement.classList?.contains('signatures-section') ||
            parentElement.textContent?.includes('Pour le stagiaire')
          ) {
            isInProtectedSection = true;
            break;
          }
        }
        currentNode = currentNode.parentNode;
      }
    }

    if (!isInProtectedSection) {
      console.log(`üîç [DEBUG] Suppression d'un √©l√©ment avec data-signature-type="participant"`);
      (element as HTMLElement).style.display = 'none';
      element.innerHTML = '';
      element.parentElement?.removeChild(element);
      removedCount++;
    } else {
      console.log('üîç [DEBUG] Conteneur de signature data-* d√©tect√© dans une zone prot√©g√©e, conservation');
    }
  });

  console.log(`üîç [DEBUG] ${removedCount} sections "Signature du participant" supprim√©es`);
  return removedCount;
};
EOF

    # Remplacer la fonction dans le fichier
    # On cherche le d√©but de la fonction et on remplace jusqu'√† la fonction suivante
    sed -i '' '/export const removeAllParticipantSignatureSections/,/export const setupSignatureContainer/!b;//{
        x
        s/.*//
        G
        s/\(export const removeAllParticipantSignatureSections[^}]*}\)\(.*export const setupSignatureContainer\)/cat '"$TMP_FILE"'\
\2/
    }' "$SIGNATURE_UTILS_FILE"
    
    # Nettoyer
    rm "$TMP_FILE"
    
    echo "‚úÖ Utilitaires de signature corrig√©s."
  fi
else
  echo "‚ùå Erreur: Fichier d'utilitaires non trouv√©: $SIGNATURE_UTILS_FILE"
fi

# 3. V√©rifier et mettre √† jour les fichiers qui utilisent le template unifi√©
echo "üîç Recherche des fichiers utilisant le template unifi√©..."
for file in $(grep -l "hideParticipantSignatureSection" "$BASE_DIR/src" --include="*.tsx" --include="*.ts"); do
  echo "üîç V√©rification de $file..."
  
  if [[ "$file" != "$TEMPLATE_FILE" && "$file" != "$SIGNATURE_UTILS_FILE" ]]; then
    backup_file "$file"
    echo "‚úÖ Fichier d√©j√† configur√©: $file"
  fi
done

echo "üéâ Correction appliqu√©e avec succ√®s!"
echo "üìã Pour tester la solution, ouvrez l'application en d√©veloppement et v√©rifiez que les signatures s'affichent correctement."
echo "üìù Un rapport d√©taill√© a √©t√© g√©n√©r√© dans: $BACKUP_DIR/rapport.log"

# G√©n√©rer un rapport
{
  echo "üìã Rapport de correction des signatures"
  echo "üìÖ Date: $(date)"
  echo "üìÇ Dossier de travail: $BASE_DIR"
  echo "üìÇ Backups: $BACKUP_DIR"
  echo "---"
  echo "‚úÖ Fichiers modifi√©s:"
  ls -la "$BACKUP_DIR"
} > "$BACKUP_DIR/rapport.log"

echo "üöÄ Pour tester la solution dans le navigateur, visitez: http://localhost:5173/test_signature.html" 