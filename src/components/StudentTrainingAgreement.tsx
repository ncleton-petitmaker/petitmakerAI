import React, { useState, useRef, useEffect } from 'react';
import { X, Download } from 'lucide-react';
import { generateWordLikePDF } from './admin/pdfGenerator';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { SignatureCanvas } from './SignatureCanvas';
import { supabase } from '../lib/supabase';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

interface StudentTrainingAgreementProps {
  training: {
    id: string;
    title: string;
    duration: string;
    trainer_name: string;
    location: string;
    start_date: string | null;
    end_date: string | null;
    objectives?: string[];
    content?: string;
    price?: number | null;
    company_id?: string;
    evaluation_methods?: {
      profile_evaluation?: boolean;
      skills_evaluation?: boolean;
      knowledge_evaluation?: boolean;
      satisfaction_survey?: boolean;
    };
    tracking_methods?: {
      attendance_sheet?: boolean;
      completion_certificate?: boolean;
    };
    pedagogical_methods?: {
      needs_evaluation?: boolean;
      theoretical_content?: boolean;
      practical_exercises?: boolean;
      case_studies?: boolean;
      experience_sharing?: boolean;
      digital_support?: boolean;
    };
    material_elements?: {
      computer_provided?: boolean;
      pedagogical_material?: boolean;
      digital_support_provided?: boolean;
    };
  };
  participant: {
    id: string;
    first_name: string;
    last_name: string;
    job_position?: string;
    company?: string;
  };
  onCancel: () => void;
  onDocumentOpen?: () => void;
  onDocumentClose?: () => void;
}

export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> = ({
  training,
  participant,
  onCancel,
  onDocumentOpen,
  onDocumentClose
}) => {
  console.log('üîç [DEBUG] StudentTrainingAgreement - Component rendering');
  
  const pdfContentRef = useRef<HTMLDivElement>(null);
  const [showSignatureCanvas, setShowSignatureCanvas] = useState(false);
  const [participantSignature, setParticipantSignature] = useState<string | null>(null);
  const [isSigned, setIsSigned] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [company, setCompany] = useState<any>(null);
  const [organizationSettings, setOrganizationSettings] = useState<any>({});

  useEffect(() => {
    console.log('üîç [DEBUG] StudentTrainingAgreement - useEffect running');
    
    const fetchCompanyAndSettings = async () => {
      try {
        console.log('üîç [DEBUG] StudentTrainingAgreement - Fetching company and settings data');
        
        // V√©rifier d'abord si un document existe d√©j√† pour cette formation et cet utilisateur
        console.log('üîç [DEBUG] V√©rification de l\'existence d\'un document dans la table documents');
        const { data: existingDocuments, error: docError } = await supabase
          .from('documents')
          .select('*')
          .eq('training_id', training.id)
          .eq('user_id', participant.id)
          .eq('type', 'convention');
          
        if (docError) {
          console.error('üîç [DEBUG] Erreur lors de la v√©rification des documents existants:', docError);
        } else if (existingDocuments && existingDocuments.length > 0) {
          console.log('üîç [DEBUG] Documents existants trouv√©s pour cet utilisateur:', existingDocuments.length);
          
          // Trier par date de cr√©ation pour obtenir le plus r√©cent
          const sortedDocs = [...existingDocuments].sort((a, b) => 
            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
          );
          
          const latestDoc = sortedDocs[0];
          console.log('üîç [DEBUG] Document le plus r√©cent pour cet utilisateur:', latestDoc);
          
          if (latestDoc.file_url) {
            console.log('üîç [DEBUG] URL du document trouv√©e, redirection vers le document existant');
            
            // Stocker l'URL dans le localStorage
            const localStorageKey = `document_${training.id}_${participant.id}_convention`;
            try {
              localStorage.setItem(localStorageKey, latestDoc.file_url);
              console.log('üîç [DEBUG] URL du document stock√©e dans le localStorage');
            } catch (storageError) {
              console.error('üîç [DEBUG] Erreur lors du stockage dans le localStorage:', storageError);
            }
            
            // Rediriger vers le document existant
            window.open(latestDoc.file_url, '_blank');
            
            // Fermer le composant
            onCancel();
            return;
          }
        } else {
          console.log('üîç [DEBUG] Aucun document existant trouv√© pour cet utilisateur, v√©rification des templates');
          
          // V√©rifier s'il existe un template de convention pour cette formation
          const { data: trainingData, error: trainingError } = await supabase
            .from('trainings')
            .select('agreement_template_url')
            .eq('id', training.id)
            .single();
            
          if (trainingError) {
            console.error('üîç [DEBUG] Erreur lors de la r√©cup√©ration du template de convention:', trainingError);
          } else if (trainingData && trainingData.agreement_template_url) {
            console.log('üîç [DEBUG] Template de convention trouv√©:', trainingData.agreement_template_url);
            
            // Nous avons un template, mais nous allons quand m√™me g√©n√©rer un document personnalis√©
            // pour cet utilisateur plut√¥t que d'utiliser directement le template
            console.log('üîç [DEBUG] G√©n√©ration d\'un document personnalis√© √† partir du template');
          }
        }
        
        // R√©cup√©rer les donn√©es de l'entreprise si disponible
        if (training.company_id) {
          const { data: companyData, error: companyError } = await supabase
            .from('companies')
            .select('*')
            .eq('id', training.company_id)
            .single();
          
          if (!companyError && companyData) {
            console.log('üîç [DEBUG] StudentTrainingAgreement - Company data fetched successfully');
            setCompany(companyData);
          }
        }
        
        // R√©cup√©rer les param√®tres de l'organisme de formation
        const { data: settingsData, error: settingsError } = await supabase
          .from('settings')
          .select('*')
          .single();
        
        if (!settingsError && settingsData) {
          console.log('üîç [DEBUG] StudentTrainingAgreement - Settings data fetched successfully');
          setOrganizationSettings(settingsData);
        }
      } catch (error) {
        console.error('üîç [DEBUG] StudentTrainingAgreement - Error fetching data:', error);
      }
    };
    
    fetchCompanyAndSettings();
    
    // Check for any z-index conflicts
    console.log('üîç [DEBUG] StudentTrainingAgreement - Document z-index:', 
      document.querySelector('.fixed.inset-0.bg-black')?.computedStyleMap()?.get('z-index'));
    
    // Log all elements with z-index > 50
    const highZIndexElements = Array.from(document.querySelectorAll('*'))
      .filter(el => {
        const style = window.getComputedStyle(el);
        const zIndex = style.getPropertyValue('z-index');
        return zIndex !== 'auto' && parseInt(zIndex, 10) > 50;
      });
    
    console.log('üîç [DEBUG] High z-index elements that might cause conflicts:', highZIndexElements);
    
  }, [training.company_id]);

  const generatePDF = async () => {
    if (!pdfContentRef.current) return;
    
    try {
      // G√©n√©rer un nom de fichier bas√© sur le nom du participant et le titre de la formation
      const fileName = `Convention_${participant.first_name}_${participant.last_name}_${training.title.replace(/\s+/g, '_')}.pdf`;
      
      // Utiliser la fonction pour g√©n√©rer un PDF
      await generateWordLikePDF(pdfContentRef.current, fileName);
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du PDF:', error);
      alert('Une erreur est survenue lors de la g√©n√©ration du PDF. Veuillez r√©essayer.');
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return '';
    try {
      const date = new Date(dateString);
      return format(date, 'dd/MM/yyyy', { locale: fr });
    } catch (e) {
      console.error('Erreur de formatage de date:', e);
      return dateString;
    }
  };

  const getCurrentDate = () => {
    return format(new Date(), 'dd MMMM yyyy', { locale: fr });
  };

  const getTrainingDates = () => {
    const startDate = formatDate(training.start_date);
    const endDate = formatDate(training.end_date);
    
    if (startDate && endDate && startDate !== endDate) {
      return `du ${startDate} au ${endDate}`;
    } else if (startDate) {
      return `le ${startDate}`;
    }
    return '';
  };

  // Fonction pour obtenir les objectifs
  const getObjectives = () => {
    if (!training.objectives) return ['Aucun objectif sp√©cifi√©'];
    
    // Si c'est d√©j√† un tableau, le retourner
    if (Array.isArray(training.objectives)) {
      return training.objectives.length > 0 ? training.objectives : ['Aucun objectif sp√©cifi√©'];
    }
    
    // Si c'est une cha√Æne, essayer de la parser comme JSON
    if (typeof training.objectives === 'string') {
      try {
        const parsed = JSON.parse(training.objectives);
        if (Array.isArray(parsed)) {
          return parsed.length > 0 ? parsed : ['Aucun objectif sp√©cifi√©'];
        }
      } catch (e) {
        // Si ce n'est pas du JSON valide, le traiter comme une cha√Æne simple
        return [training.objectives];
      }
    }
    
    return ['Aucun objectif sp√©cifi√©'];
  };

  // Fonction pour obtenir les m√©thodes d'√©valuation
  const getEvaluationMethods = () => {
    const methods = [];
    
    if (training.evaluation_methods) {
      if (training.evaluation_methods.profile_evaluation) methods.push("√âvaluation du profil");
      if (training.evaluation_methods.skills_evaluation) methods.push("√âvaluation des comp√©tences");
      if (training.evaluation_methods.knowledge_evaluation) methods.push("√âvaluation des connaissances");
      if (training.evaluation_methods.satisfaction_survey) methods.push("Questionnaire de satisfaction");
    }
    
    return methods.length > 0 ? methods : ["Aucune m√©thode d'√©valuation sp√©cifi√©e"];
  };

  // Fonction pour obtenir les m√©thodes p√©dagogiques
  const getPedagogicalMethods = () => {
    const methods = [];
    
    if (training.pedagogical_methods) {
      if (training.pedagogical_methods.needs_evaluation) methods.push("√âvaluation des besoins");
      if (training.pedagogical_methods.theoretical_content) methods.push("Apports th√©oriques");
      if (training.pedagogical_methods.practical_exercises) methods.push("Exercices pratiques");
      if (training.pedagogical_methods.case_studies) methods.push("√âtudes de cas");
      if (training.pedagogical_methods.experience_sharing) methods.push("Partage d'exp√©rience");
      if (training.pedagogical_methods.digital_support) methods.push("Support num√©rique");
    }
    
    return methods.length > 0 ? methods : ["Aucune m√©thode p√©dagogique sp√©cifi√©e"];
  };

  // Fonction pour obtenir les √©l√©ments mat√©riels
  const getMaterialElements = () => {
    const elements = [];
    
    if (training.material_elements) {
      if (training.material_elements.computer_provided) elements.push("Ordinateur fourni");
      if (training.material_elements.pedagogical_material) elements.push("Mat√©riel p√©dagogique");
      if (training.material_elements.digital_support_provided) elements.push("Support num√©rique fourni");
    }
    
    return elements.length > 0 ? elements : ["Aucun √©l√©ment mat√©riel sp√©cifi√©"];
  };

  const handleSignatureCancel = () => {
    setShowSignatureCanvas(false);
  };

  const handleSignatureSave = async (signatureDataUrl: string) => {
    setParticipantSignature(signatureDataUrl);
    setShowSignatureCanvas(false);
    setIsSigned(true);
    
    try {
      setIsSaving(true);
      
      // V√©rifier si l'utilisateur est authentifi√©
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        throw new Error("Vous devez √™tre connect√© pour signer le document");
      }
      
      console.log('üîç [DEBUG] Utilisateur authentifi√©:', session.user.id);
      console.log('üîç [DEBUG] Participant ID:', participant.id);
      console.log('üîç [DEBUG] Training ID:', training.id);
      
      // Convertir l'URL de donn√©es en Blob
      const res = await fetch(signatureDataUrl);
      const blob = await res.blob();
      console.log('üîç [DEBUG] Taille du blob:', blob.size, 'bytes');
      console.log('üîç [DEBUG] Type du blob:', blob.type);
      
      // Cr√©er un nom de fichier unique pour la signature (simplifi√©)
      const timestamp = Date.now();
      const fileName = `signature_${timestamp}.png`;
      
      console.log('üîç [DEBUG] T√©l√©chargement de la signature dans le bucket signatures:', fileName);
      
      // T√©l√©charger la signature dans le bucket Supabase
      const { data, error } = await supabase.storage
        .from('signatures')
        .upload(fileName, blob, {
          contentType: 'image/png',
          upsert: true
        });
      
      if (error) {
        console.error('üîç [DEBUG] Erreur lors du t√©l√©chargement de la signature:', error);
        // Utiliser une approche s√ªre pour acc√©der aux propri√©t√©s
        console.error('üîç [DEBUG] D√©tails de l\'erreur:', JSON.stringify(error, null, 2));
        throw error;
      }
      
      console.log('üîç [DEBUG] Signature t√©l√©charg√©e avec succ√®s:', data);
      
      // Obtenir l'URL publique de la signature
      const { data: urlData } = await supabase.storage
        .from('signatures')
        .getPublicUrl(fileName);
      
      console.log('üîç [DEBUG] URL publique de la signature:', urlData);
      
      // Mettre √† jour la base de donn√©es pour enregistrer que le participant a sign√©
      console.log('üîç [DEBUG] Mise √† jour du profil utilisateur:', participant.id);
      const { error: updateError } = await supabase
        .from('user_profiles')
        .update({
          has_signed_agreement: true,
          agreement_signature_url: urlData.publicUrl,
          agreement_signature_date: new Date().toISOString()
        })
        .eq('id', participant.id);
      
      if (updateError) {
        console.error('üîç [DEBUG] Erreur lors de la mise √† jour du profil:', updateError);
        console.error('üîç [DEBUG] D√©tails de l\'erreur de mise √† jour:', JSON.stringify(updateError, null, 2));
        throw updateError;
      }
      
      console.log('üîç [DEBUG] Profil mis √† jour avec succ√®s');
      
      // G√©n√©rer le PDF du document sign√©
      if (pdfContentRef.current) {
        try {
          console.log('üîç [DEBUG] G√©n√©ration du PDF');
          // Cr√©er un √©l√©ment temporaire pour la g√©n√©ration du PDF
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = pdfContentRef.current.innerHTML;
          document.body.appendChild(tempDiv);
          
          // V√©rifier que la signature est visible dans le PDF
          const signatureImg = tempDiv.querySelector('img[alt="Signature du stagiaire"]');
          if (signatureImg) {
            console.log('üîç [DEBUG] Signature trouv√©e dans le contenu du PDF');
            // S'assurer que l'image de signature est charg√©e
            (signatureImg as HTMLImageElement).src = signatureDataUrl;
          } else {
            console.warn('üîç [DEBUG] Signature non trouv√©e dans le contenu du PDF');
          }
          
          // G√©n√©rer le PDF
          const pdfBlob = await generateDocumentPDF(tempDiv);
          document.body.removeChild(tempDiv);
          
          console.log('üîç [DEBUG] PDF g√©n√©r√© avec succ√®s, taille:', pdfBlob.size, 'bytes');
          
          // Cr√©er un nom de fichier unique pour le document (simplifi√©)
          const pdfFileName = `convention_${participant.last_name.toLowerCase()}_${participant.first_name.toLowerCase()}_${timestamp}.pdf`;
          
          console.log('üîç [DEBUG] T√©l√©chargement du PDF dans le bucket agreements:', pdfFileName);
          
          // T√©l√©charger le PDF dans le bucket Supabase
          const { data: pdfData, error: pdfError } = await supabase.storage
            .from('agreements')
            .upload(pdfFileName, pdfBlob, {
              contentType: 'application/pdf',
              upsert: true
            });
          
          if (pdfError) {
            console.error('üîç [DEBUG] Erreur lors du t√©l√©chargement du PDF:', pdfError);
            console.error('üîç [DEBUG] D√©tails de l\'erreur PDF:', JSON.stringify(pdfError, null, 2));
            throw pdfError;
          }
          
          console.log('üîç [DEBUG] PDF t√©l√©charg√© avec succ√®s:', pdfData);
          
          // Obtenir l'URL publique du PDF
          const { data: pdfUrlData } = await supabase.storage
            .from('agreements')
            .getPublicUrl(pdfFileName);
          
          console.log('üîç [DEBUG] URL publique du PDF:', pdfUrlData);
          
          // Cr√©er une entr√©e dans la table documents
          const documentTitle = `Convention de formation - ${participant.first_name} ${participant.last_name}`;
          const documentType = 'convention';
          const documentUrl = pdfUrlData.publicUrl;
          
          console.log('üîç [DEBUG] Cr√©ation de l\'entr√©e document avec les donn√©es:', {
            title: documentTitle,
            type: documentType,
            file_url: documentUrl,
            user_id: participant.id,
            training_id: training.id,
            created_by: session.user.id
          });
          
          // Essayer d'ins√©rer le document avec la m√©thode RPC pour contourner les probl√®mes de RLS
          try {
            console.log('üîç [DEBUG] Tentative d\'insertion du document via RPC');
            
            // M√©thode 1: Insertion directe
            const { data: docData, error: docError } = await supabase
              .from('documents')
              .insert({
                title: documentTitle,
                type: documentType,
                file_url: documentUrl,
                user_id: participant.id,
                training_id: training.id,
                created_by: session.user.id
              })
              .select();
            
            if (docError) {
              console.error('üîç [DEBUG] Erreur lors de la cr√©ation de l\'entr√©e document (m√©thode 1):', docError);
              console.error('üîç [DEBUG] D√©tails de l\'erreur document:', JSON.stringify(docError, null, 2));
              
              // M√©thode 2: Essayer avec une autre approche si la premi√®re √©choue
              console.log('üîç [DEBUG] Tentative d\'insertion avec la m√©thode 2');
              const { error: docError2 } = await supabase
                .from('documents')
                .insert({
                  title: documentTitle,
                  type: documentType,
                  file_url: documentUrl,
                  user_id: participant.id,
                  training_id: training.id,
                  created_by: session.user.id
                });
              
              if (docError2) {
                console.error('üîç [DEBUG] Erreur lors de la cr√©ation de l\'entr√©e document (m√©thode 2):', docError2);
                console.error('üîç [DEBUG] D√©tails de l\'erreur document:', JSON.stringify(docError2, null, 2));
                throw docError2;
              } else {
                console.log('üîç [DEBUG] Document ins√©r√© avec succ√®s (m√©thode 2)');
              }
            } else {
              console.log('üîç [DEBUG] Entr√©e document cr√©√©e avec succ√®s (m√©thode 1):', docData);
            }
          } catch (insertError) {
            console.error('üîç [DEBUG] Erreur lors de l\'insertion du document:', insertError);
            // Ne pas bloquer le processus si l'insertion √©choue
          }
          
          // V√©rifier que le document a bien √©t√© cr√©√©
          console.log('üîç [DEBUG] V√©rification de la cr√©ation du document');
          const { data: checkData, error: checkError } = await supabase
            .from('documents')
            .select('*')
            .eq('training_id', training.id)
            .eq('user_id', participant.id)
            .eq('type', documentType);
          
          if (checkError) {
            console.error('üîç [DEBUG] Erreur lors de la v√©rification du document:', checkError);
          } else {
            console.log('üîç [DEBUG] R√©sultat de la v√©rification:', checkData);
            if (checkData && checkData.length > 0) {
              console.log('üîç [DEBUG] Document trouv√© dans la base de donn√©es:', checkData[0]);
              
              // Stocker l'URL du document dans le localStorage pour contourner les probl√®mes de RLS
              try {
                localStorage.setItem(`document_${training.id}_${participant.id}_${documentType}`, documentUrl);
                console.log('üîç [DEBUG] URL du document stock√©e dans le localStorage');
              } catch (storageError) {
                console.error('üîç [DEBUG] Erreur lors du stockage dans le localStorage:', storageError);
              }
            } else {
              console.warn('üîç [DEBUG] Aucun document trouv√© apr√®s insertion');
              
              // Stocker l'URL du document dans le localStorage comme fallback
              try {
                localStorage.setItem(`document_${training.id}_${participant.id}_${documentType}`, documentUrl);
                console.log('üîç [DEBUG] URL du document stock√©e dans le localStorage (fallback)');
              } catch (storageError) {
                console.error('üîç [DEBUG] Erreur lors du stockage dans le localStorage:', storageError);
              }
            }
          }
        } catch (pdfError) {
          console.error('üîç [DEBUG] Erreur lors de la g√©n√©ration du PDF:', pdfError);
          // Ne pas bloquer le processus si la g√©n√©ration du PDF √©choue
        }
      } else {
        console.error('üîç [DEBUG] pdfContentRef.current est null, impossible de g√©n√©rer le PDF');
      }
      
      console.log('Signature de la convention enregistr√©e avec succ√®s');
      
      // Forcer la mise √† jour de l'interface utilisateur
      setTimeout(() => {
        alert('Document sign√© avec succ√®s. Vous pouvez maintenant le consulter.');
      }, 500);
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de la signature:', error);
      
      // Afficher un message d'erreur plus d√©taill√©
      let errorMessage = 'Une erreur est survenue lors de l\'enregistrement de la signature.';
      
      if (error instanceof Error) {
        errorMessage += ' ' + error.message;
      }
      
      if (typeof error === 'object' && error !== null && 'message' in error) {
        errorMessage += ' ' + (error as any).message;
      }
      
      alert(errorMessage);
    } finally {
      setIsSaving(false);
    }
  };

  // Fonction pour g√©n√©rer un PDF √† partir d'un √©l√©ment HTML
  const generateDocumentPDF = async (element: HTMLElement): Promise<Blob> => {
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      logging: false
    });
    
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    const imgWidth = 210; // A4 width in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
    
    return pdf.output('blob');
  };

  const objectives = getObjectives();
  const evaluationMethods = getEvaluationMethods();
  const pedagogicalMethods = getPedagogicalMethods();
  const materialElements = getMaterialElements();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-100 flex items-center justify-center z-[9999] overflow-hidden">
      {showSignatureCanvas ? (
        <SignatureCanvas 
          onSave={handleSignatureSave} 
          onCancel={handleSignatureCancel}
          initialName={`${participant.first_name} ${participant.last_name}`}
        />
      ) : (
        <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col m-4">
          <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">
              Convention de formation
            </h3>
            <div className="flex space-x-2">
              <button
                onClick={generatePDF}
                className="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                disabled={!isSigned}
              >
                <Download className="h-4 w-4 mr-1.5" />
                T√©l√©charger
              </button>
              <button
                onClick={() => {
                  console.log('üîç [DEBUG] StudentTrainingAgreement - Close button clicked');
                  onCancel();
                }}
                className="inline-flex items-center px-2 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <X className="h-4 w-4" />
              </button>
            </div>
          </div>
          
          <div className="flex-1 overflow-y-auto p-6">
            <div ref={pdfContentRef} className="bg-white p-8 shadow-sm border border-gray-200 mx-auto" style={{ maxWidth: '800px' }}>
              <div className="text-center mb-8">
                <h1 className="text-2xl font-bold mb-2">CONVENTION DE FORMATION PROFESSIONNELLE</h1>
                <p className="text-sm text-gray-600">(Article L. 6353-1 du Code du travail)</p>
              </div>
              
              <div className="mb-8">
                <p>Entre les soussign√©s :</p>
                <p className="mt-4"><strong>1. {organizationSettings.organization_name || 'FORMACEO'}</strong></p>
                <p>SIRET : {organizationSettings.siret || 'N/A'}</p>
                <p>Adresse : {organizationSettings.address || 'N/A'}</p>
                <p>Repr√©sent√© par : {organizationSettings.representative_name || 'N/A'}</p>
                <p>Num√©ro de d√©claration d'activit√© : {organizationSettings.activity_declaration_number || 'N/A'}</p>
                <p className="mt-4"><strong>2. {company?.name || participant.company || 'Entreprise du stagiaire'}</strong></p>
                <p>Repr√©sent√© par : {company?.contact_name || 'N/A'}</p>
                <p>Adresse : {company?.address || 'N/A'}</p>
                <p>SIRET : {company?.siret || 'N/A'}</p>
                <p className="mt-4">Est conclue la convention suivante, en application des dispositions du Livre III de la sixi√®me partie du Code du travail.</p>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 1 : Objet de la convention</h2>
                <p>L'organisme de formation s'engage √† organiser l'action de formation suivante :</p>
                <p className="mt-2"><strong>Intitul√© de la formation :</strong> {training.title}</p>
                <p><strong>Objectifs :</strong></p>
                <ul className="list-disc pl-6">
                  {objectives.map((objective, index) => (
                    <li key={index} className="mb-1">{objective}</li>
                  ))}
                </ul>
                <p className="mt-2"><strong>Dates :</strong> {getTrainingDates()}</p>
                <p><strong>Dur√©e :</strong> {training.duration}</p>
                <p><strong>Lieu :</strong> {training.location}</p>
                <p><strong>Participant :</strong> {participant.first_name} {participant.last_name}{participant.job_position ? ` - ${participant.job_position}` : ''}</p>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 2 : Nature et caract√©ristiques de l'action de formation</h2>
                <p><strong>M√©thodes p√©dagogiques :</strong></p>
                <ul className="list-disc pl-6">
                  {pedagogicalMethods.map((method, index) => (
                    <li key={index} className="mb-1">{method}</li>
                  ))}
                </ul>
                <p className="mt-2"><strong>Moyens mat√©riels :</strong></p>
                <ul className="list-disc pl-6">
                  {materialElements.map((element, index) => (
                    <li key={index} className="mb-1">{element}</li>
                  ))}
                </ul>
                <p className="mt-2"><strong>M√©thodes d'√©valuation :</strong></p>
                <ul className="list-disc pl-6">
                  {evaluationMethods.map((method, index) => (
                    <li key={index} className="mb-1">{method}</li>
                  ))}
                </ul>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 3 : Dispositions financi√®res</h2>
                <p>Le client s'engage √† verser √† l'organisme de formation, en contrepartie de cette action de formation, une somme correspondant aux frais de formation de :</p>
                <p className="mt-2"><strong>Prix HT :</strong> {training.price ? `${training.price} ‚Ç¨` : 'N/A'}</p>
                <p><strong>TVA (20%) :</strong> {training.price ? `${training.price * 0.2} ‚Ç¨` : 'N/A'}</p>
                <p><strong>Prix TTC :</strong> {training.price ? `${training.price * 1.2} ‚Ç¨` : 'N/A'}</p>
                <p className="mt-2">Cette somme couvre l'int√©gralit√© des frais engag√©s par l'organisme de formation pour cette session.</p>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 4 : Modalit√©s de r√®glement</h2>
                <p>Le paiement sera d√ª √† r√©ception de la facture, √† l'issue de la formation.</p>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 5 : D√©dit ou abandon</h2>
                <p>En cas de d√©dit par l'entreprise √† moins de 10 jours francs avant le d√©but de l'action mentionn√©e √† l'article 1, ou d'abandon en cours de formation par un ou plusieurs stagiaires, l'organisme remboursera sur le co√ªt total, les sommes qu'il n'aura pas r√©ellement d√©pens√©es ou engag√©es pour la r√©alisation de ladite action.</p>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 6 : Date d'effet et dur√©e de la convention</h2>
                <p>La pr√©sente convention prend effet √† compter de sa signature pour la dur√©e de la formation.</p>
              </div>
              
              <div className="mb-8">
                <h2 className="text-xl font-bold mb-4">Article 7 : Diff√©rends √©ventuels</h2>
                <p>Si une contestation ou un diff√©rend ne peuvent √™tre r√©gl√©s √† l'amiable, le Tribunal de Commerce de Paris sera seul comp√©tent pour r√©gler le litige.</p>
              </div>
              
              <div className="mb-8">
                <p>Fait en double exemplaire, √† Paris, le {getCurrentDate()}</p>
              </div>
              
              <div className="flex justify-between mt-12">
                <div className="text-left">
                  <p className="font-bold">Pour le stagiaire :</p>
                  <p>{participant.first_name} {participant.last_name}</p>
                  <div className="h-24 w-48 mt-2 border border-gray-300 flex items-center justify-center">
                    {participantSignature ? (
                      <img src={participantSignature} alt="Signature du stagiaire" className="max-h-full max-w-full" />
                    ) : (
                      <p className="text-gray-400 text-sm">Aucune signature</p>
                    )}
                  </div>
                </div>
                
                <div className="text-right">
                  <p className="font-bold">Pour l'organisme de formation :</p>
                  <p>{organizationSettings.representative_name || 'Le repr√©sentant'}</p>
                  <div className="h-24 w-48 mt-2 border border-gray-300">
                    {/* Espace pour la signature de l'organisme */}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="px-6 py-4 border-t border-gray-200 flex justify-between">
            {!isSigned && (
              <button
                onClick={() => {
                  console.log('üîç [DEBUG] StudentTrainingAgreement - Sign button clicked');
                  setShowSignatureCanvas(true);
                }}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                Signer le document
              </button>
            )}
            {isSigned && (
              <div className="text-green-600 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                Document sign√©
              </div>
            )}
            <button
              onClick={() => {
                console.log('üîç [DEBUG] StudentTrainingAgreement - Close button clicked');
                onCancel();
              }}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Fermer
            </button>
          </div>
        </div>
      )}
    </div>
  );
}; 