// Script pour cr√©er le bucket "organization-seals" dans Supabase
import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import fs from 'fs';

// Charger les variables d'environnement
config();

// URL et cl√© Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY; // Utilisation de la cl√© de service pour les droits admin

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Les variables SUPABASE_URL et SUPABASE_KEY doivent √™tre d√©finies dans le fichier .env');
  process.exit(1);
}

console.log('üîç Connexion √† Supabase avec la cl√© de service...');
console.log(`üîç URL: ${supabaseUrl}`);
console.log(`üîç Cl√©: ${supabaseKey.substring(0, 10)}...`);

// Cr√©ation du client Supabase avec la cl√© de service
const supabase = createClient(supabaseUrl, supabaseKey);

// Fonction principale
async function createBucket() {
  try {
    console.log('üîç V√©rification des buckets existants...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des buckets:', bucketsError);
      throw bucketsError;
    }
    
    console.log('üìã Buckets existants:', buckets.map(b => b.name));
    
    // V√©rifier si le bucket existe d√©j√†
    const bucketExists = buckets.some(b => b.name === 'organization-seals');
    console.log(`üîç Le bucket "organization-seals" existe d√©j√†: ${bucketExists}`);
    
    if (!bucketExists) {
      console.log('üîç Cr√©ation du bucket "organization-seals"...');
      const { data, error } = await supabase.storage.createBucket('organization-seals', {
        public: true,
        fileSizeLimit: 5242880 // 5MB
      });
      
      if (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du bucket:', error);
        throw error;
      }
      
      console.log('‚úÖ Bucket "organization-seals" cr√©√© avec succ√®s!');
      
      // Ajouter les politiques RLS pour le bucket
      console.log('üîç Configuration des politiques RLS...');
      
      // √âcrire le script SQL pour les politiques
      const sqlScript = `
        -- Cr√©er les politiques pour le bucket organization-seals
        -- Politique pour permettre √† tout le monde de voir les tampons
        CREATE POLICY "Tout le monde peut voir les tampons"
        ON storage.objects FOR SELECT
        USING (bucket_id = 'organization-seals');
        
        -- Politique pour permettre aux utilisateurs authentifi√©s d'ajouter des tampons
        CREATE POLICY "Les utilisateurs peuvent ajouter des tampons"
        ON storage.objects FOR INSERT
        WITH CHECK (bucket_id = 'organization-seals' AND auth.role() = 'authenticated');
        
        -- Politique pour permettre aux utilisateurs de modifier leurs propres tampons
        CREATE POLICY "Les utilisateurs peuvent modifier leurs tampons"
        ON storage.objects FOR UPDATE
        USING (bucket_id = 'organization-seals' AND auth.role() = 'authenticated');
        
        -- Politique pour permettre aux utilisateurs de supprimer leurs propres tampons
        CREATE POLICY "Les utilisateurs peuvent supprimer leurs tampons"
        ON storage.objects FOR DELETE
        USING (bucket_id = 'organization-seals' AND auth.role() = 'authenticated');
      `;
      
      fs.writeFileSync('create-bucket-policies.sql', sqlScript);
      console.log('‚úÖ Script SQL pour les politiques √©crit dans create-bucket-policies.sql');
      console.log('‚ö†Ô∏è Veuillez ex√©cuter ce script SQL dans l\'interface SQL de Supabase pour configurer les politiques.');
    }
    
    console.log('‚úÖ Vous pouvez maintenant uploader des tampons dans le bucket "organization-seals".');
    
    // V√©rifier √† nouveau les buckets pour confirmer
    const { data: updatedBuckets } = await supabase.storage.listBuckets();
    console.log('üìã Liste actualis√©e des buckets:', updatedBuckets.map(b => b.name));
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du bucket:', error);
  }
}

// Ex√©cuter la fonction principale
createBucket(); 