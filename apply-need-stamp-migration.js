import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Charger les variables d'environnement
config();

// R√©cup√©rer les informations Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://efgirjtbuzljtzpuwsue.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVmZ2lyanRidXpsanR6cHV3c3VlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDIyNTQwNCwiZXhwIjoyMDU1ODAxNDA0fQ.lk0lG2qYwyBg8PVmF5NnUvBY4tz8A0dfOiD-ptA4fTk';

// Cr√©er le client Supabase
const supabase = createClient(supabaseUrl, supabaseKey);

// Obtenir le chemin du fichier de migration
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const migrationFilePath = path.join(__dirname, 'migrations', 'add_need_stamp_column.sql');

async function applyMigration() {
  console.log('üîÑ D√©but de la migration pour ajouter la colonne need_stamp...');

  try {
    // Lire le contenu du fichier SQL
    const sqlContent = fs.readFileSync(migrationFilePath, 'utf8');
    console.log('üìÑ Fichier SQL de migration lu avec succ√®s');
    
    // Ex√©cuter la requ√™te SQL via l'RPC execute_sql
    console.log('üîç Ex√©cution de la migration SQL...');
    const { data, error } = await supabase.rpc('execute_sql', { sql: sqlContent });
    
    if (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution de la migration SQL:', error);
      throw error;
    }
    
    console.log('‚úÖ Migration SQL ex√©cut√©e avec succ√®s:', data);
    
    // V√©rifier que la colonne a bien √©t√© ajout√©e
    console.log('üîç V√©rification de l\'ajout de la colonne need_stamp...');
    const { data: columnCheckData, error: columnCheckError } = await supabase.rpc(
      'execute_sql',
      {
        sql: `
          SELECT column_name, data_type
          FROM information_schema.columns
          WHERE table_schema = 'public'
            AND table_name = 'documents'
            AND column_name = 'need_stamp';
        `
      }
    );
    
    if (columnCheckError) {
      console.error('‚ùå Erreur lors de la v√©rification de la colonne:', columnCheckError);
    } else {
      if (columnCheckData && columnCheckData.length > 0) {
        console.log('‚úÖ Colonne need_stamp v√©rifi√©e avec succ√®s:', columnCheckData);
      } else {
        console.error('‚ö†Ô∏è La colonne need_stamp n\'a pas √©t√© trouv√©e apr√®s la migration');
      }
    }
    
    // V√©rifier les valeurs mises √† jour (pour les conventions)
    console.log('üîç V√©rification des documents mis √† jour...');
    const { data: documentsData, error: documentsError } = await supabase.rpc(
      'execute_sql',
      {
        sql: `
          SELECT type, need_stamp, COUNT(*) as count
          FROM public.documents
          GROUP BY type, need_stamp;
        `
      }
    );
    
    if (documentsError) {
      console.error('‚ùå Erreur lors de la v√©rification des documents:', documentsError);
    } else {
      console.log('‚úÖ R√©sum√© des documents par type et need_stamp:', documentsData);
    }

    console.log('üéâ Migration termin√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration
applyMigration(); 