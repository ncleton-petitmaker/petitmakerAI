// Script pour cr√©er le bucket "organization-seals" en utilisant toutes les m√©thodes disponibles
// Ce script essaie plusieurs approches en s√©quence jusqu'√† ce qu'une r√©ussisse
import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import https from 'https';
import fs from 'fs';

// Charger les variables d'environnement
config();

// URL et cl√© Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://efgirjtbuzljtzpuwsue.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVmZ2lyanRidXpsanR6cHV3c3VlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDIyNTQwNCwiZXhwIjoyMDU1ODAxNDA0fQ.lk0lG2qYwyBg8PVmF5NnUvBY4tz8A0dfOiD-ptA4fTk';

// Client Supabase
const supabase = createClient(supabaseUrl, supabaseKey);

// Extraction du domaine pour les requ√™tes API
const domain = supabaseUrl.replace('https://', '');

console.log('üîç URL Supabase:', supabaseUrl);
console.log('üîç Domaine:', domain);
console.log('üîç Utilisation de la cl√© de service pour les op√©rations');

// Fonction pour faire une requ√™te HTTP
function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: domain,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseKey}`,
        'apikey': supabaseKey,
        'Prefer': 'return=representation'
      }
    };

    if (data) {
      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));
    }

    const req = https.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = responseData ? JSON.parse(responseData) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: responseData
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// V√©rifie si le bucket existe d√©j√†
async function checkBucketExists() {
  try {
    console.log('üîç V√©rification des buckets existants...');
    
    // M√©thode 1: Utilisation du SDK
    try {
      const { data: bucketsSDK, error: errorSDK } = await supabase.storage.listBuckets();
      if (errorSDK) {
        console.error('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des buckets avec le SDK:', errorSDK);
      } else {
        console.log('üìã Buckets existants (SDK):', bucketsSDK.map(b => b.name));
        if (bucketsSDK.some(b => b.name === 'organization-seals')) {
          console.log('‚úÖ Le bucket "organization-seals" existe d√©j√† (d√©tect√© par SDK)');
          return true;
        }
      }
    } catch (sdkError) {
      console.error('‚ö†Ô∏è Exception lors de l\'utilisation du SDK:', sdkError);
    }
    
    // M√©thode 2: Requ√™te HTTP directe
    try {
      const listResponse = await makeRequest('GET', '/storage/v1/bucket');
      if (listResponse.statusCode === 200) {
        const buckets = listResponse.data;
        console.log('üìã Buckets existants (HTTP):', buckets.map(b => b.name));
        if (buckets.some(b => b.name === 'organization-seals')) {
          console.log('‚úÖ Le bucket "organization-seals" existe d√©j√† (d√©tect√© par HTTP)');
          return true;
        }
      } else {
        console.error('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des buckets par HTTP:', listResponse);
      }
    } catch (httpError) {
      console.error('‚ö†Ô∏è Exception lors de la requ√™te HTTP:', httpError);
    }
    
    // M√©thode 3: V√©rification directe du bucket sp√©cifique
    try {
      const getBucketResponse = await makeRequest('GET', '/storage/v1/bucket/organization-seals');
      if (getBucketResponse.statusCode === 200) {
        console.log('‚úÖ Le bucket "organization-seals" existe d√©j√† (d√©tect√© par requ√™te directe)');
        return true;
      }
    } catch (directError) {
      console.error('‚ö†Ô∏è Exception lors de la v√©rification directe:', directError);
    }
    
    console.log('üîç Le bucket "organization-seals" n\'existe pas encore');
    return false;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des buckets:', error);
    return false;
  }
}

// M√©thode 1: Cr√©ation via SDK Supabase
async function createBucketViaSDK() {
  try {
    console.log('üîç Tentative de cr√©ation du bucket via SDK Supabase...');
    
    const { data, error } = await supabase.storage.createBucket('organization-seals', {
      public: true,
      fileSizeLimit: 5242880 // 5MB en octets
    });
    
    if (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du bucket via SDK:', error);
      return false;
    }
    
    console.log('‚úÖ Bucket "organization-seals" cr√©√© avec succ√®s via SDK!', data);
    return true;
  } catch (error) {
    console.error('‚ùå Exception lors de la cr√©ation du bucket via SDK:', error);
    return false;
  }
}

// M√©thode 2: Cr√©ation via HTTP direct
async function createBucketViaHTTP() {
  try {
    console.log('üîç Tentative de cr√©ation du bucket via HTTP direct...');
    
    // Donn√©es pour la cr√©ation du bucket
    const bucketData = {
      id: 'organization-seals',
      name: 'organization-seals',
      public: true,
      file_size_limit: 5242880 // 5MB en octets
    };
    
    // Cr√©er le bucket
    const createResponse = await makeRequest('POST', '/storage/v1/bucket', bucketData);
    
    if (createResponse.statusCode !== 200 && createResponse.statusCode !== 201) {
      console.error('‚ùå Erreur lors de la cr√©ation du bucket via HTTP:', createResponse);
      return false;
    }
    
    console.log('‚úÖ Bucket "organization-seals" cr√©√© avec succ√®s via HTTP!', createResponse.data);
    return true;
  } catch (error) {
    console.error('‚ùå Exception lors de la cr√©ation du bucket via HTTP:', error);
    return false;
  }
}

// M√©thode 3: Appel de la fonction RPC
async function createBucketViaRPC() {
  try {
    console.log('üîç Tentative de cr√©ation du bucket via appel RPC...');
    
    // Appeler la fonction RPC
    const rpcResponse = await makeRequest('POST', '/rest/v1/rpc/create_bucket_organization_seals');
    
    if (rpcResponse.statusCode !== 200) {
      console.error('‚ùå Erreur lors de l\'appel RPC:', rpcResponse);
      return false;
    }
    
    console.log('‚úÖ R√©sultat de l\'appel RPC:', rpcResponse.data);
    
    if (rpcResponse.data && rpcResponse.data.success) {
      console.log('‚úÖ Bucket "organization-seals" cr√©√© avec succ√®s via RPC!');
      return true;
    } else {
      console.warn('‚ö†Ô∏è La fonction RPC a √©chou√©:', rpcResponse.data ? rpcResponse.data.message : 'R√©ponse invalide');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Exception lors de l\'appel RPC:', error);
    return false;
  }
}

// M√©thode 4: Insertion dans la table storage_buckets_manual
async function createBucketViaManualTable() {
  try {
    console.log('üîç Tentative de cr√©ation du bucket via table storage_buckets_manual...');
    
    // V√©rifier si la table existe
    const tableCheckResponse = await makeRequest('GET', '/rest/v1/storage_buckets_manual?limit=1');
    
    if (tableCheckResponse.statusCode !== 200) {
      console.warn('‚ö†Ô∏è La table storage_buckets_manual n\'existe pas ou n\'est pas accessible');
      return false;
    }
    
    // Donn√©es pour l'insertion
    const bucketData = {
      id: 'organization-seals',
      name: 'organization-seals',
      owner: null,
      public: true,
      file_size_limit: 5242880, // 5MB en octets
      created_at: new Date().toISOString(),
      processed: false
    };
    
    // Ins√©rer dans la table storage_buckets_manual
    const insertResponse = await makeRequest('POST', '/rest/v1/storage_buckets_manual', bucketData);
    
    if (insertResponse.statusCode !== 201) {
      console.error('‚ùå Erreur lors de l\'insertion dans storage_buckets_manual:', insertResponse);
      return false;
    }
    
    console.log('‚úÖ Enregistrement ins√©r√© avec succ√®s dans storage_buckets_manual:', insertResponse.data);
    console.log('‚è≥ Attente de 2 secondes pour laisser le trigger s\'ex√©cuter...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // V√©rifier si le bucket a √©t√© cr√©√©
    if (await checkBucketExists()) {
      console.log('‚úÖ Bucket "organization-seals" cr√©√© avec succ√®s via table manuelle!');
      return true;
    } else {
      console.warn('‚ö†Ô∏è L\'insertion a r√©ussi mais le bucket n\'a pas √©t√© cr√©√© automatiquement');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Exception lors de la cr√©ation via table manuelle:', error);
    return false;
  }
}

// M√©thode 5: Cr√©ation des politiques d'acc√®s
async function createPolicies() {
  try {
    console.log('üîç Cr√©ation des politiques d\'acc√®s pour le bucket "organization-seals"...');
    
    // Script SQL pour les politiques
    const sqlScript = `
      -- Cr√©er les politiques pour le bucket organization-seals
      -- Politique pour permettre √† tout le monde de voir les tampons
      DO $$
      BEGIN
        -- Suppression des politiques existantes si elles existent
        BEGIN
          DROP POLICY IF EXISTS "Tout le monde peut voir les tampons" ON storage.objects;
        EXCEPTION WHEN others THEN
          -- Ignorer les erreurs
        END;
        
        BEGIN
          DROP POLICY IF EXISTS "Les utilisateurs peuvent ajouter des tampons" ON storage.objects;
        EXCEPTION WHEN others THEN
          -- Ignorer les erreurs
        END;
        
        BEGIN
          DROP POLICY IF EXISTS "Les utilisateurs peuvent modifier leurs tampons" ON storage.objects;
        EXCEPTION WHEN others THEN
          -- Ignorer les erreurs
        END;
        
        BEGIN
          DROP POLICY IF EXISTS "Les utilisateurs peuvent supprimer leurs tampons" ON storage.objects;
        EXCEPTION WHEN others THEN
          -- Ignorer les erreurs
        END;
        
        -- Cr√©er les nouvelles politiques
        CREATE POLICY "Tout le monde peut voir les tampons"
        ON storage.objects FOR SELECT
        USING (bucket_id = 'organization-seals');
        
        CREATE POLICY "Les utilisateurs peuvent ajouter des tampons"
        ON storage.objects FOR INSERT
        WITH CHECK (bucket_id = 'organization-seals' AND auth.role() = 'authenticated');
        
        CREATE POLICY "Les utilisateurs peuvent modifier leurs tampons"
        ON storage.objects FOR UPDATE
        USING (bucket_id = 'organization-seals' AND auth.role() = 'authenticated');
        
        CREATE POLICY "Les utilisateurs peuvent supprimer leurs tampons"
        ON storage.objects FOR DELETE
        USING (bucket_id = 'organization-seals' AND auth.role() = 'authenticated');
      END $$;
    `;
    
    // √âcrire le SQL dans un fichier
    fs.writeFileSync('all-methods-policies.sql', sqlScript);
    console.log('‚úÖ Script SQL pour les politiques √©crit dans all-methods-policies.sql');
    console.log('‚ö†Ô∏è Veuillez ex√©cuter ce script SQL dans l\'interface SQL de Supabase pour configurer les politiques.');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des politiques:', error);
    return false;
  }
}

// Fonction principale qui essaie toutes les m√©thodes
async function createBucketAllMethods() {
  try {
    console.log('üöÄ D√©marrage du processus de cr√©ation du bucket "organization-seals"...');
    
    // V√©rifier si le bucket existe d√©j√†
    if (await checkBucketExists()) {
      console.log('‚úÖ Le bucket existe d√©j√†, cr√©ation des politiques uniquement...');
      await createPolicies();
      return;
    }
    
    // Essayer la m√©thode 1
    console.log('\nüìå M√âTHODE 1: SDK SUPABASE');
    if (await createBucketViaSDK()) {
      console.log('‚úÖ M√©thode 1 r√©ussie! Cr√©ation des politiques...');
      await createPolicies();
      return;
    }
    
    // Essayer la m√©thode 2
    console.log('\nüìå M√âTHODE 2: HTTP DIRECT');
    if (await createBucketViaHTTP()) {
      console.log('‚úÖ M√©thode 2 r√©ussie! Cr√©ation des politiques...');
      await createPolicies();
      return;
    }
    
    // Essayer la m√©thode 3
    console.log('\nüìå M√âTHODE 3: FONCTION RPC');
    if (await createBucketViaRPC()) {
      console.log('‚úÖ M√©thode 3 r√©ussie! Cr√©ation des politiques...');
      await createPolicies();
      return;
    }
    
    // Essayer la m√©thode 4
    console.log('\nüìå M√âTHODE 4: TABLE MANUELLE AVEC TRIGGER');
    if (await createBucketViaManualTable()) {
      console.log('‚úÖ M√©thode 4 r√©ussie! Cr√©ation des politiques...');
      await createPolicies();
      return;
    }
    
    // Si toutes les m√©thodes ont √©chou√©
    console.error('‚ùå Toutes les m√©thodes ont √©chou√©. Voici les √©tapes manuelles √† suivre:');
    console.error('1. Connectez-vous √† l\'interface Supabase et naviguez vers "Storage"');
    console.error('2. Cr√©ez un nouveau bucket nomm√© "organization-seals"');
    console.error('3. Ex√©cutez le script all-methods-policies.sql dans l\'√©diteur SQL');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du processus:', error);
  } finally {
    // V√©rifier une derni√®re fois si le bucket existe
    const finalExists = await checkBucketExists();
    console.log(`\nüèÅ R√©sultat final: Le bucket "organization-seals" ${finalExists ? 'existe' : 'n\'existe pas'}`);
    
    if (finalExists) {
      console.log('‚úÖ Vous pouvez maintenant uploader des tampons dans le bucket "organization-seals"');
    }
  }
}

// Ex√©cuter la fonction principale
createBucketAllMethods(); 