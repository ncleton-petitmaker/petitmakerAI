From f29d8938a47297b2bcebb0eccde6243c3e5351c7 Mon Sep 17 00:00:00 2001
From: nicolascleton <nicolas.cleton@petitmaler.fr>
Date: Tue, 8 Apr 2025 21:18:52 +0200
Subject: [PATCH] =?UTF-8?q?fix(student):=20utiliser=20une=20fonction=20SQL?=
 =?UTF-8?q?=20s=C3=A9curis=C3=A9e=20pour=20afficher=20tous=20les=20partici?=
 =?UTF-8?q?pants=20d'une=20formation=20dans=20la=20convention=20c=C3=B4t?=
 =?UTF-8?q?=C3=A9=20apprenant?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/components/StudentTrainingAgreement.tsx | 1481 +++++++------------
 1 file changed, 549 insertions(+), 932 deletions(-)

diff --git a/src/components/StudentTrainingAgreement.tsx b/src/components/StudentTrainingAgreement.tsx
index 38d658e..abd7430 100644
--- a/src/components/StudentTrainingAgreement.tsx
+++ b/src/components/StudentTrainingAgreement.tsx
@@ -3,7 +3,9 @@ import { useParams } from 'react-router-dom';
 import { supabase } from '../lib/supabase';
 import { format } from 'date-fns';
 import { fr } from 'date-fns/locale';
-import UnifiedTrainingAgreementTemplate from './shared/templates/unified/TrainingAgreementTemplate';
+import UnifiedTrainingAgreementTemplate, { 
+  OrganizationSettings as TemplateOrganizationSettings 
+} from './shared/templates/unified/TrainingAgreementTemplate';
 import SignatureCanvas from './SignatureCanvas';
 import { createPortal } from 'react-dom';
 import { X, Download, CheckCircle } from 'lucide-react';
@@ -21,7 +23,8 @@ import Confetti from 'react-confetti';
 // @ts-ignore
 import { BeatLoader } from 'react-spinners';
 import { optimizeSealUrl } from '../utils/SignatureUtils';
-import { OrganizationSettings } from './shared/DocumentUtils';
+// Utiliser l'alias pour √©viter conflit
+type OrganizationSettings = TemplateOrganizationSettings;
 
 // Types
 interface Company {
@@ -68,7 +71,8 @@ const parseJsonField = (field: any) => {
       // Parser directement si c'est un format JSON standard
       return JSON.parse(field);
     } catch (e) {
-      console.error('Erreur lors du parsing JSON:', e, 'field:', field);
+      // Ne pas logguer ici pour √©viter le bruit
+      // console.error('Erreur lors du parsing JSON:', e, 'field:', field);
       return null;
     }
   }
@@ -77,7 +81,7 @@ const parseJsonField = (field: any) => {
 };
 
 // D√©finition des param√®tres par d√©faut pour l'organisation
-const DEFAULT_ORGANIZATION_SETTINGS: OrganizationSettings = {
+const DEFAULT_ORGANIZATION_SETTINGS: TemplateOrganizationSettings = {
   organization_name: 'PETITMAKER',
   address: '2 rue H√©racl√®s',
   siret: '928 386 044 00012',
@@ -89,22 +93,14 @@ const DEFAULT_ORGANIZATION_SETTINGS: OrganizationSettings = {
   country: 'France'
 };
 
-// Fonction utilitaire de log
-const log = (emoji: string, type: string, message: string, data?: any) => {
-  if (data) {
-    console.log(`${emoji} ${type}`, message, data);
-  } else {
-    console.log(`${emoji} ${type}`, message);
-  }
-};
-
 // Interface pour le cache global de signatures
 interface SignatureCacheItem {
-  participantSig?: string | null;
-  companySeal?: string | null;
-  organizationSeal?: string | null;
-  trainerSig?: string | null;
-  timestamp?: number;
+  participantSig: string | null;
+  representativeSig?: string | null; // AJOUT: Signature du repr√©sentant pour la convention
+  companySeal: string | null;
+  organizationSeal: string | null;
+  trainerSig: string | null;
+  timestamp: number;
 }
 
 // Cache global des signatures
@@ -143,11 +139,10 @@ const GLOBAL_SIGNATURE_CACHE = {
 // Fonction utilitaire pour charger les signatures de fa√ßon synchrone
 function loadSignaturesSync(trainingId: string, participantId: string): SignatureCacheItem {
   try {
-    console.log('‚ö° [INIT] Chargement synchrone des signatures:', { trainingId, participantId });
+    // console.log('‚ö° [INIT] Chargement synchrone initial...'); // Log supprim√©
     
     // R√©cup√©rer depuis le cache local
     const cached = GLOBAL_SIGNATURE_CACHE.getCache(trainingId, participantId);
-    console.log('üìã [INIT] Donn√©es du cache:', cached);
     
     // V√©rifier √©galement dans le localStorage pour plus de robustesse
     try {
@@ -156,26 +151,24 @@ function loadSignaturesSync(trainingId: string, participantId: string): Signatur
       
       if (storedData) {
         const parsedData = JSON.parse(storedData);
-        console.log('üìã [INIT] Donn√©es du localStorage:', parsedData);
         
         // Si le cache en m√©moire est vide mais qu'on a des donn√©es dans le localStorage
         if (!cached.participantSig && !cached.companySeal && 
             (parsedData.participantSig || parsedData.companySeal)) {
           // Mettre √† jour le cache en m√©moire avec les donn√©es du localStorage
           GLOBAL_SIGNATURE_CACHE.setCache(trainingId, participantId, parsedData);
-          console.log('üîÑ [INIT] Cache en m√©moire mis √† jour depuis localStorage');
           
           // Retourner les donn√©es du localStorage
           return parsedData;
         }
       }
     } catch (e) {
-      console.error('‚ùå [INIT] Erreur lors de la r√©cup√©ration depuis localStorage:', e);
+      // Ne pas logguer ici pour √©viter le bruit
+      // console.error('‚ùå [INIT] Erreur lors de la r√©cup√©ration depuis localStorage:', e);
     }
     
     // Pr√©charger les images si disponibles
     if (cached.participantSig || cached.companySeal || cached.organizationSeal) {
-      console.log('üîÑ [INIT] Pr√©chargement des images du cache');
       GLOBAL_SIGNATURE_CACHE.preloadImages([
         cached.participantSig, 
         cached.companySeal,
@@ -183,10 +176,27 @@ function loadSignaturesSync(trainingId: string, participantId: string): Signatur
       ]);
     }
     
-    return cached;
+    // Retourner les donn√©es du cache, en s'assurant que tous les champs sont pr√©sents
+    return {
+      participantSig: cached?.participantSig ?? null,
+      representativeSig: cached?.representativeSig ?? null,
+      companySeal: cached?.companySeal ?? null,
+      trainerSig: cached?.trainerSig ?? null, // Assurer que trainerSig est inclus
+      organizationSeal: cached?.organizationSeal ?? null,
+      timestamp: cached?.timestamp ?? 0 // Assurer que timestamp est inclus
+    };
   } catch (e) {
-    console.error('‚ùå [INIT] Erreur du chargement synchrone des signatures:', e);
-    return { participantSig: null, companySeal: null, organizationSeal: null };
+    // Ne pas logguer ici pour √©viter le bruit
+    // console.error('‚ùå [INIT] Erreur du chargement synchrone des signatures:', e);
+    // Retourner un objet complet m√™me en cas d'erreur
+    return { 
+      participantSig: null, 
+      representativeSig: null,
+      companySeal: null, 
+      trainerSig: null,
+      organizationSeal: null, 
+      timestamp: 0 
+    };
   }
 }
 
@@ -249,14 +259,9 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   onDocumentClose
 }) => {
   const [company, setCompany] = useState<Company | null>(null);
-  const [organizationSettings, setOrganizationSettings] = useState<OrganizationSettings | null>(null);
+  const [organizationSettings, setOrganizationSettings] = useState<TemplateOrganizationSettings | null>(null);
   const [showSignatureCanvas, setShowSignatureCanvas] = useState(false);
   const [showSealCanvas, setShowSealCanvas] = useState(false);
-  const [participantSignature, setParticipantSignature] = useState<string | null>(null);
-  const [representativeSignature, setRepresentativeSignature] = useState<string | null>(null);
-  const [trainerSignature, setTrainerSignature] = useState<string | null>(null);
-  const [companySeal, setCompanySeal] = useState<string | null>(null);
-  const [organizationSeal, setOrganizationSeal] = useState<string | null>(null);
   const [generatingPDF, setGeneratingPDF] = useState(false);
   const [saved, setSaved] = useState(false);
   const [showSuccess, setShowSuccess] = useState(false);
@@ -277,14 +282,25 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   // Ajouter cette r√©f√©rence pour suivre la derni√®re fois que les signatures ont √©t√© charg√©es
   const lastSignatureLoadTimeRef = useRef<number>(0);
 
-  // Fonction pour mettre √† jour le cache de signatures
+  // Charger imm√©diatement les signatures avant le premier rendu
+  const initialSignatures = loadSignaturesSync(training.id, participant.id);
+
+  // Initialiser les √©tats AVEC les valeurs du cache (sauf repr√©sentant), en g√©rant les undefined
+  // D√©placer CES declarations AVANT updateSignatureCache
+  const [participantSignature, setParticipantSignature] = useState<string | null>(initialSignatures.participantSig ?? null);
+  const [representativeSignature, setRepresentativeSignature] = useState<string | null>(null); // Repr√©sentant n'est pas dans le cache sync
+  const [trainerSignature, setTrainerSignature] = useState<string | null>(initialSignatures.trainerSig ?? null);
+  const [companySeal, setCompanySeal] = useState<string | null>(initialSignatures.companySeal ?? null);
+  const [organizationSeal, setOrganizationSeal] = useState<string | null>(initialSignatures.organizationSeal ?? null);
+
+  // Fonction pour mettre √† jour le cache de signatures (MAINTENANT APRES LES STATES)
   const updateSignatureCache = useCallback((
     newParticipantSig?: string | null,
     newCompanySeal?: string | null,
     newOrganizationSeal?: string | null,
     newTrainerSig?: string | null
   ) => {
-    log('üîÑ', '[CACHE_UPDATE]', 'Mise √† jour du cache de signatures');
+    // console.log('üîÑ [CACHE_UPDATE] Mise √† jour du cache de signatures'); // Log supprim√©
     
     try {
       // Utiliser les nouvelles valeurs ou conserver les valeurs actuelles
@@ -301,27 +317,33 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
       
       // Sauvegarder dans le localStorage
       try {
-        const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
+      const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
         localStorage.setItem(localStorageKey, JSON.stringify(updatedCache));
-      } catch (e) {
-        console.error('‚ùå [CACHE_UPDATE] Erreur lors de la sauvegarde localStorage:', e);
+    } catch (e) {
+        // console.error('‚ùå [CACHE_UPDATE] Erreur lors de la sauvegarde localStorage:', e); // Log supprim√©
       }
       
-      log('‚úÖ', '[CACHE_UPDATE]', 'Cache de signatures mis √† jour avec succ√®s');
+      // console.log('‚úÖ [CACHE_UPDATE] Cache de signatures mis √† jour avec succ√®s'); // Log supprim√©
     } catch (e) {
-      console.error('‚ùå [CACHE_UPDATE] Erreur lors de la mise √† jour du cache:', e);
+      // console.error('‚ùå [CACHE_UPDATE] Erreur lors de la mise √† jour du cache:', e); // Log supprim√©
     }
   }, [participantSignature, companySeal, organizationSeal, trainerSignature, training.id, participant.id]);
 
-  // Charger imm√©diatement les signatures avant m√™me le premier rendu
-  const initialSignatures = loadSignaturesSync(training.id, participant.id);
-  
-  // Log critique pour diagnostiquer le probl√®me initial
-  console.log('üö® [DIAGNOSTIC_CRITIQUE] Initialisation des √©tats avec:', {
-    initialSignatures,
-    organizationSealInitialValue: initialSignatures.organizationSeal || 'NON PR√âSENT DANS LE CACHE', 
-    cacheKeys: Object.keys(initialSignatures)
-  });
+  // AJOUT: Setter s√©curis√© pour representativeSignature
+  const safeSetRepresentativeSignature = useCallback((url: string | null) => {
+    setRepresentativeSignature(prev => url !== null ? url : prev);
+  }, []);
+
+  // SUPPRIM√â: useEffect d'initialisation, car on initialise directement avec useState
+
+  // Log critique pour diagnostiquer le probl√®me initial (apr√®s initialisation)
+  // console.log('üö® [DIAGNOSTIC_CRITIQUE] √âtats initiaux apr√®s chargement sync:', { // Log supprim√©
+  //   participantSig: participantSignature,
+  //   representativeSig: representativeSignature,
+  //   trainerSig: trainerSignature,
+  //   companySeal,
+  //   organizationSeal,
+  // });
 
   const pdfContentRef = useRef<HTMLDivElement>(null);
   const [portalElement, setPortalElement] = useState<HTMLElement | null>(null);
@@ -338,7 +360,6 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   const [localSignatureDataURL, setLocalSignatureDataURL] = useState<string | null>(null);
   const [hasParticipantSignature, setHasParticipantSignature] = useState(false);
   const [signatureAction, setSignatureAction] = useState<string | null>(null);
-  const [shouldRefresh, setShouldRefresh] = useState(false);
   
   // R√©f√©rence pour savoir si les signatures ont √©t√© charg√©es depuis Supabase
   const signaturesLoadedRef = useRef(false);
@@ -356,35 +377,41 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   // Effet s√©par√© pour r√©cup√©rer tous les participants de la formation
   useEffect(() => {
     const fetchAllParticipants = async () => {
+      const companyName = participant.company || '';
+      
+      console.log('üö®üö®üö® D√âBUT CHARGEMENT DES PARTICIPANTS POUR FORMATION', training.id);
+      
       try {
-        console.log('üîç [PARTICIPANTS] R√©cup√©ration des participants pour la formation:', training.id);
-        
-        // R√©cup√©rer tous les utilisateurs associ√©s √† cette formation via user_profiles
+        console.log(`üîç [PARTICIPANTS] Recherche des apprenants pour l'entreprise: ${companyName}`);
+           
+        // M√âTHODE ULTRA-DRASTIQUE: Utiliser une nouvelle fonction SQL encore plus sp√©cifique
+        // qui retourne exactement les champs dont nous avons besoin sans RLS
         const { data: participantsData, error: participantsError } = await supabase
-          .from('user_profiles')
-          .select('*')
-          .eq('training_id', training.id);
-          
+          .rpc('find_training_participants', {
+            training_id_param: training.id
+          });
+        
+        // V√©rifier si on a des erreurs
         if (participantsError) {
-          console.error('‚ùå [PARTICIPANTS] Erreur lors de la r√©cup√©ration des apprenants via user_profiles:', participantsError);
-          
+          console.error('‚ùå [PARTICIPANTS] Erreur lors de la r√©cup√©ration des participants:', participantsError);
+            
           // En cas d'erreur, utiliser au moins le participant actuel
           const defaultParticipant: ParticipantData = {
-            id: participant.id,
-            first_name: participant.first_name,
-            last_name: participant.last_name,
-            job_position: participant.job_position || '',
-            company: participant.company || '',
-            email: '',
+              id: participant.id,
+              first_name: participant.first_name,
+              last_name: participant.last_name,
+              job_position: participant.job_position || '',
+              company: participant.company || '',
+              email: '',
             status: 'Inscrit'
-          };
+            };
           
           setAllTrainingParticipants([defaultParticipant]);
           return;
         }
         
         if (participantsData && participantsData.length > 0) {
-          console.log('‚úÖ [PARTICIPANTS] Apprenants trouv√©s via user_profiles:', participantsData.length);
+          console.log(`‚úÖ [PARTICIPANTS] ${participantsData.length} apprenants trouv√©s pour la formation`);
           
           // Transformer les donn√©es dans le bon format avec un typage explicite
           const formattedParticipants: ParticipantData[] = participantsData.map((p: any) => ({
@@ -396,34 +423,36 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             email: p.email || '',
             status: p.status || 'Inscrit'
           }));
+        
+          // S'assurer que l'apprenant actuel est toujours pr√©sent dans la liste si son entreprise correspond
+        const currentParticipantIncluded = formattedParticipants.some(p => p.id === participant.id);
+        
+          if (!currentParticipantIncluded && participant.company && 
+              participant.company.toLowerCase().includes(companyName.toLowerCase())) {
+            console.log('‚ûï [PARTICIPANTS] Ajout du participant actuel (m√™me entreprise) qui n\'√©tait pas dans la liste');
           
-          console.log('üîÑ [PARTICIPANTS] Participants format√©s depuis user_profiles:', formattedParticipants.length);
-          
-          // S'assurer que l'apprenant actuel est toujours pr√©sent dans la liste
-          const currentParticipantIncluded = formattedParticipants.some(p => p.id === participant.id);
-          
-          if (!currentParticipantIncluded) {
-            console.log('‚ûï [PARTICIPANTS] Ajout du participant actuel qui n\'√©tait pas dans la liste:', participant);
-            
             const currentParticipant: ParticipantData = {
-              id: participant.id,
-              first_name: participant.first_name,
-              last_name: participant.last_name,
-              job_position: participant.job_position || '',
-              company: participant.company || '',
-              email: '',
-              status: 'Inscrit'
+            id: participant.id,
+            first_name: participant.first_name,
+            last_name: participant.last_name,
+            job_position: participant.job_position || '',
+            company: participant.company || '',
+            email: '',
+            status: 'Inscrit'
             };
             
             formattedParticipants.push(currentParticipant);
           }
           
-          setAllTrainingParticipants(formattedParticipants);
+        setAllTrainingParticipants(formattedParticipants);
+        console.log('üö®üö®üö® PARTICIPANTS CHARG√âS:', JSON.stringify(formattedParticipants));
+        console.log('üö®üö®üö® NOMBRE DE PARTICIPANTS:', formattedParticipants.length);
         } else {
-          console.log('‚ö†Ô∏è [PARTICIPANTS] Aucun participant trouv√© via user_profiles, utilisation du participant actuel');
+          console.log(`‚ö†Ô∏è [PARTICIPANTS] Aucun apprenant trouv√© pour l'entreprise ${companyName}`);
+          console.log('üö®üö®üö® AUCUN PARTICIPANT TROUV√â DANS LA REQU√äTE');
           
-          // Si aucun participant n'est trouv√© dans la table user_profiles,
-          // utiliser au moins le participant actuel
+          // Si aucun participant n'est trouv√© et que le participant actuel est de cette entreprise
+          if (participant.company && participant.company.toLowerCase().includes(companyName.toLowerCase())) {
           const defaultParticipant: ParticipantData = {
             id: participant.id,
             first_name: participant.first_name,
@@ -434,10 +463,17 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             status: 'Inscrit'
           };
           
+            console.log('‚ûï [PARTICIPANTS] Utilisation du participant actuel (m√™me entreprise)');
           setAllTrainingParticipants([defaultParticipant]);
+          } else {
+            // Si le participant actuel n'est pas de cette entreprise, liste vide
+            console.log('‚ö†Ô∏è [PARTICIPANTS] Le participant actuel n\'est pas de l\'entreprise associ√©e √† la formation');
+            setAllTrainingParticipants([]);
+          }
         }
       } catch (error) {
         console.error('‚ùå [PARTICIPANTS] Erreur g√©n√©rale lors de la r√©cup√©ration des participants:', error);
+        console.log('üö®üö®üö® ERREUR CRITIQUE LORS DU CHARGEMENT DES PARTICIPANTS:', error);
         
         // Fallback au participant actuel
         const defaultParticipant: ParticipantData = {
@@ -452,33 +488,43 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         
         setAllTrainingParticipants([defaultParticipant]);
       }
++      
++      console.log('üö®üö®üö® FIN CHARGEMENT DES PARTICIPANTS');
     };
     
     fetchAllParticipants();
-  }, [training.id, participant.id, participant.first_name, participant.last_name, participant.job_position, participant.company]);
+  }, [training.id, training.company_id, participant.id, participant.first_name, participant.last_name, participant.job_position, participant.company]);
 
   // Wrapper pour setParticipantSignature qui prot√®ge contre les nulls ind√©sirables
   const safeSetParticipantSignature = useCallback((value: string | null) => {
     if (value || !signaturesLocked) {
       setParticipantSignature(value);
     } else {
-      console.log('üîí [PROTECT] Tentative de d√©finir participantSignature √† null bloqu√©e');
+      // console.log('üîí [PROTECT] Tentative de d√©finir participantSignature √† null bloqu√©e'); // Log supprim√©
     }
   }, [signaturesLocked]);
 
-  // Wrapper pour setCompanySeal qui prot√®ge contre les nulls ind√©sirables
+  // Ajouter la fonction pour mettre √† jour le tampon d'entreprise de mani√®re s√©curis√©e
   const safeSetCompanySeal = useCallback((value: string | null) => {
     if (value || !signaturesLocked) {
       setCompanySeal(value);
     } else {
-      console.log('üîí [PROTECT] Tentative de d√©finir companySeal √† null bloqu√©e');
+      // console.log('üîí [PROTECT] Set companySeal to null blocked'); // Log supprim√©
     }
   }, [signaturesLocked]);
 
-  // Ajouter la fonction pour mettre √† jour la signature du formateur de mani√®re s√©curis√©e (vers ligne 370-380 avec les autres fonctions safe)
+  // Ajouter la fonction pour mettre √† jour le tampon d'organisme de mani√®re s√©curis√©e
+  const safeSetOrganizationSeal = useCallback((value: string | null) => {
+    if (value || !signaturesLocked) {
+      setOrganizationSeal(value);
+    } else {
+      // console.log('üîí [PROTECT] Set organizationSeal to null blocked'); // Log supprim√©
+    }
+  }, [signaturesLocked]);
+
+  // Ajouter la fonction pour mettre √† jour la signature du formateur de mani√®re s√©curis√©e
   const safeSetTrainerSignature = useCallback((url: string | null) => {
-    console.log('üîí [TRAINER] Mise √† jour s√©curis√©e de la signature du formateur:', 
-      url ? `${url.substring(0, 50)}...` : 'null');
+    // console.log('üîí [TRAINER] Mise √† jour s√©curis√©e de la signature du formateur:', url ? `${url.substring(0, 50)}...` : 'null'); // Log supprim√©
     setTrainerSignature(url);
     setHasTrainerSignature(!!url);
   }, []);
@@ -486,141 +532,89 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   // Effet pour charger les signatures depuis Supabase (asynchrone, apr√®s le premier rendu)
   useEffect(() => {
     const loadSignaturesFromSupabase = async () => {
-      try {
-        // V√©rifier si nous avons charg√© les signatures r√©cemment
-        const now = Date.now();
-        const timeSinceLastLoad = now - lastSignatureLoadTimeRef.current;
-        
-        // Ne charger que toutes les 30 secondes maximum
-        if (timeSinceLastLoad < 30000 && lastSignatureLoadTimeRef.current > 0) {
-          console.log(`‚è±Ô∏è [THROTTLE] Chargement des signatures ignor√© (dernier chargement il y a ${Math.round(timeSinceLastLoad/1000)}s, minimum 30s)`);
+      if (signaturesLoadedRef.current) {
         return;
       }
       
-        // Mettre √† jour le timestamp du dernier chargement
-        lastSignatureLoadTimeRef.current = now;
-        
+      try {
         console.log('üîÑ [SUPABASE] Chargement des signatures depuis Supabase:', {
           training_id: training.id,
-          user_id: participant.id,
           type: 'convention'
         });
         
-        // Toujours charger les signatures de Supabase, m√™me si on a d√©j√† v√©rifi√© (pour les r√©ouvertures de modale)
-        signaturesLoadedRef.current = false;
+        // R√©cup√©rer toutes les signatures pour cette formation et ce type de document
+        let documentsData = [];
         
-        // Requ√™te Supabase pour les signatures les plus r√©centes
-        const { data: signatureData, error: signatureError } = await supabase
-          .from('document_signatures')
+        // 1. Chercher tous les documents pour cette formation, y compris les signatures
+        const { data: documentData, error: documentsError } = await supabase
+          .from('documents')
           .select('*')
           .eq('training_id', training.id)
-          .eq('user_id', participant.id)
           .eq('type', 'convention')
           .order('created_at', { ascending: false });
           
-        if (signatureError) {
-          console.error('‚ùå [SUPABASE] Erreur lors de la r√©cup√©ration des signatures:', signatureError);
+        if (documentData && documentData.length > 0) {
+          documentsData = documentData;
+          console.log(`‚úÖ [DOCUMENTS] ${documentData.length} documents trouv√©s pour la formation`);
+        } else {
+          console.log(`‚ö†Ô∏è [DOCUMENTS] Aucun document trouv√© pour la formation id=${training.id}`);
+        }
           
-          // Si √©chec avec document_signatures, essayer avec la table documents
-          console.log('‚ö†Ô∏è [SUPABASE] Tentative de r√©cup√©ration via la table documents');
+        // Chercher sp√©cifiquement le tampon de l'organisation (qui peut √™tre sans training_id)
+        const { data: orgSealData, error: orgSealError } = await supabase
+          .from('documents')
+          .select('*')
+          .is('training_id', null)
+          .eq('signature_type', 'organizationSeal')
+          .order('created_at', { ascending: false })
+          .limit(1);
           
-          const { data: documentsData, error: documentsError } = await supabase
+        if (orgSealData && orgSealData.length > 0) {
+          console.log(`‚úÖ [DOCUMENTS] Tampon d'organisation global trouv√©`);
+          documentsData = [...(documentsData || []), ...orgSealData];
+        }
+        
+        // Si l'entreprise est d√©finie, chercher aussi les signatures partag√©es pour le tampon de l'entreprise
+        if (company && company.id) {
+          // R√©cup√©rer les tampons d'entreprise pour cette formation et cette entreprise
+          const { data: sharedDocs, error: sharedError } = await supabase
             .from('documents')
             .select('*')
             .eq('training_id', training.id)
-            .eq('user_id', participant.id)
+            .eq('company_id', company.id)
             .eq('type', 'convention')
+            .in('signature_type', ['companySeal'])
             .order('created_at', { ascending: false });
           
-          if (documentsError || !documentsData || documentsData.length === 0) {
-            console.log('‚ö†Ô∏è [SUPABASE] Aucun document trouv√© dans la table documents');
-            return;
-          }
-          
-          // Traiter les donn√©es de la table documents
-          let participantSigUrl = null;
-          let companySealUrl = null;
-          
-          for (const doc of documentsData) {
-            if (!doc.file_url) continue;
-            
-            const baseUrl = doc.file_url.split('?')[0];
-            const timestamp = Date.now();
-            const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-            
-            if (doc.title === "Signature de l'apprenant") {
-              participantSigUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Signature participant trouv√©e dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            } else if (doc.title === "Tampon de l'entreprise") {
-              companySealUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Tampon entreprise trouv√© dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            }
-          }
-          
-          // Mettre √† jour les √©tats si on a trouv√© des signatures
-          if (participantSigUrl) {
-            safeSetParticipantSignature(participantSigUrl);
-            setIsSigned(true);
-            setHasParticipantSignature(true);
-          }
-          
-          if (companySealUrl) {
-            safeSetCompanySeal(companySealUrl);
+          if (!sharedError && sharedDocs && sharedDocs.length > 0) {
+            // Ajouter les signatures partag√©es aux documents personnels
+            documentsData = [...(documentsData || []), ...sharedDocs];
+            console.log(`‚úÖ [COMPANY_SEAL] ${sharedDocs.length} tampons d'entreprise trouv√©s`);
           }
-          
-          // Mettre √† jour le cache global
-          if (participantSigUrl || companySealUrl) {
-            GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
-              participantSig: participantSigUrl,
-              companySeal: companySealUrl,
-              // Conserver le tampon de l'organisme s'il existe d√©j√†
-              organizationSeal: organizationSeal
-            });
-            
-            // Mettre √† jour le localStorage
-            try {
-              const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
-              const cacheData = {
-                participantSig: participantSigUrl,
-                companySeal: companySealUrl,
-                organizationSeal: organizationSeal,
-                timestamp: Date.now()
-              };
-              localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
-              console.log('üíæ [SUPABASE] Cache sauvegard√© dans localStorage');
-            } catch (e) {
-              console.error('‚ùå [SUPABASE] Erreur lors de la sauvegarde localStorage:', e);
-            }
-            
-            // Forcer un rafra√Æchissement
-            setTimeout(() => {
-              setShouldRefresh(prev => !prev);
-            }, 100);
+        } 
+      
+        if (documentsError) {
+          console.error('‚ùå [DOCUMENTS] Erreur lors de la r√©cup√©ration des documents:', documentsError);
+            return;
           }
-          
-          return;
-        }
         
-        if (!signatureData || signatureData.length === 0) {
-          console.log('‚ÑπÔ∏è [SUPABASE] Aucune signature trouv√©e dans document_signatures, tentative avec documents');
-          
-          // Essayer avec la table documents
-          const { data: documentsData, error: documentsError } = await supabase
-            .from('documents')
-            .select('*')
-            .eq('training_id', training.id)
-            .eq('user_id', participant.id)
-            .eq('type', 'convention')
-            .order('created_at', { ascending: false });
-          
-          if (documentsError || !documentsData || documentsData.length === 0) {
-            console.log('‚ö†Ô∏è [SUPABASE] Aucun document trouv√© dans la table documents non plus');
+        if (!documentsData || documentsData.length === 0) {
+            console.log('‚ö†Ô∏è [DOCUMENTS] Aucun document trouv√© apr√®s fusion');
             return;
           }
+
+        console.log(`üîç [DEBUG] Traitement de ${documentsData.length} documents pour les signatures`);
           
           // Traiter les donn√©es de la table documents
-          let participantSigUrl = null;
-          let companySealUrl = null;
+        let participantSigUrl: string | null = null; // On ne cherche plus la signature participant ici
+        let representativeSigUrl: string | null = null; 
+        let companySealUrl: string | null = null;
+        let trainerSigUrl: string | null = null;
+        let organizationSealUrl: string | null = null;
+        
+        // V√©rifier quels types de signatures sont pr√©sents dans les donn√©es
+        const signatureTypes = documentsData.map(doc => doc.signature_type);
+        console.log('üîç [DEBUG] Types de signatures disponibles:', [...new Set(signatureTypes)].filter(Boolean));
           
           for (const doc of documentsData) {
             if (!doc.file_url) continue;
@@ -629,124 +623,175 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             const timestamp = Date.now();
             const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
             
-            if (doc.title === "Signature de l'apprenant") {
-              participantSigUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Signature participant trouv√©e dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            } else if (doc.title === "Tampon de l'entreprise") {
+          // MODIFI√â: Chercher la signature du repr√©sentant sans v√©rifier company_id
+          if (doc.signature_type === 'representative') {
+            if (!representativeSigUrl) {
+              representativeSigUrl = antiCacheUrl;
+              console.log('‚úÖ [DEBUG] Representative signature document FOUND in loop', antiCacheUrl);
+            }
+          } else if ((doc.signature_type === 'companySeal' || doc.title === "Tampon de l'entreprise") && company?.id) {
+            // Permettre un sceau d'entreprise m√™me sans company_id correspondant
+            if (!companySealUrl) {
               companySealUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Tampon entreprise trouv√© dans documents:', antiCacheUrl.substring(0, 50) + '...');
+              console.log('‚úÖ [DEBUG] Company seal FOUND', antiCacheUrl);
+            }
+          } else if (doc.signature_type === 'trainer' || doc.title === "Signature du formateur") {
+            if (!trainerSigUrl) {
+              trainerSigUrl = antiCacheUrl;
+              console.log('‚úÖ [DEBUG] Trainer signature FOUND', antiCacheUrl);
+            }
+          } else if (doc.signature_type === 'organizationSeal' || doc.title === "Tampon de l'organisme") {
+            if (!organizationSealUrl) {
+              organizationSealUrl = antiCacheUrl;
+              console.log('‚úÖ [DEBUG] Organization seal FOUND in documents table', antiCacheUrl);
+              // Force reload for organization seal to ensure it's visible
+              const forceReloadUrl = `${doc.file_url.split('?')[0]}?t=${Date.now()}&forcereload=true&nocache=${Math.random()}`;
+              organizationSealUrl = forceReloadUrl;
             }
           }
+        }
           
-          // Mettre √† jour les √©tats si on a trouv√© des signatures
-          if (participantSigUrl) {
-            safeSetParticipantSignature(participantSigUrl);
-            setIsSigned(true);
-            setHasParticipantSignature(true);
-          }
-          
-          if (companySealUrl) {
-            safeSetCompanySeal(companySealUrl);
-          }
-          
-          // Mettre √† jour le cache global
-          if (participantSigUrl || companySealUrl) {
-            GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
-              participantSig: participantSigUrl,
-              companySeal: companySealUrl,
-              // Conserver le tampon de l'organisme s'il existe d√©j√†
-              organizationSeal: organizationSeal
-            });
+        // Si le tampon de l'organisme n'a pas √©t√© trouv√© dans les documents, essayer de le r√©cup√©rer depuis settings
+        if (!organizationSealUrl) {
+          console.log('üîç [ORG_SEAL] Tampon non trouv√© dans documents, recherche dans la table settings...');
+          try {
+            const { data: settingsData, error: settingsError } = await supabase
+              .from('settings')
+              .select('organization_seal_url, organization_seal_path')
+              .single();
             
-            // Mettre √† jour le localStorage
-            try {
-              const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
-              const cacheData = {
-                participantSig: participantSigUrl,
-                companySeal: companySealUrl,
-                organizationSeal: organizationSeal,
-                timestamp: Date.now()
-              };
-              localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
-              console.log('üíæ [SUPABASE] Cache sauvegard√© dans localStorage');
-            } catch (e) {
-              console.error('‚ùå [SUPABASE] Erreur lors de la sauvegarde localStorage:', e);
+            if (settingsError) {
+              console.error('‚ùå [ORG_SEAL] Erreur lors de la recherche dans settings:', settingsError);
+            } else if (settingsData && settingsData.organization_seal_url) {
+              console.log('‚úÖ [ORG_SEAL] Tampon trouv√© dans settings, URL:', settingsData.organization_seal_url);
+              
+              // Ajouter un anti-cache √† l'URL avec plus de param√®tres pour √©viter tout probl√®me de cache
+              const timestamp = Date.now();
+              const random = Math.random();
+              organizationSealUrl = `${settingsData.organization_seal_url.split('?')[0]}?t=${timestamp}&forcereload=true&nocache=${random}`;
+              
+              // Test d'accessibilit√© de l'URL
+              try {
+                const testImg = new Image();
+                testImg.onload = () => {
+                  console.log('‚úÖ [ORG_SEAL] Test d\'acc√®s au tampon r√©ussi:', organizationSealUrl);
+                  // SUPPRIM√â: Mise √† jour forc√©e du DOM ici
+                };
+                testImg.onerror = () => {
+                  console.error('‚ùå [ORG_SEAL] Test d\'acc√®s au tampon √©chou√©:', organizationSealUrl);
+                };
+                testImg.src = organizationSealUrl;
+              } catch (testError) {
+                console.error('‚ùå [ORG_SEAL] Erreur lors du test d\'acc√®s au tampon:', testError);
+              }
+            } else if (settingsData && settingsData.organization_seal_path) {
+              // Si nous avons un chemin mais pas d'URL, g√©n√©rer l'URL
+              console.log('üîç [ORG_SEAL] G√©n√©ration d\'URL √† partir du chemin:', settingsData.organization_seal_path);
+              
+              const { data: urlData } = await supabase.storage
+                .from('organization-seals')
+                .getPublicUrl(settingsData.organization_seal_path);
+              
+              if (urlData && urlData.publicUrl) {
+                // Ajouter un anti-cache √† l'URL
+                const timestamp = Date.now();
+                organizationSealUrl = `${urlData.publicUrl.split('?')[0]}?t=${timestamp}&forcereload=true`;
+                console.log('‚úÖ [ORG_SEAL] URL g√©n√©r√©e √† partir du chemin:', organizationSealUrl);
+              } else {
+                console.error('‚ùå [ORG_SEAL] Impossible de g√©n√©rer une URL publique pour le chemin');
+              }
+            } else {
+              console.log('‚ö†Ô∏è [ORG_SEAL] Aucune information de tampon trouv√©e dans settings');
+              
+              // Derni√®re tentative: chercher directement dans le bucket organization-seals
+              console.log('üîç [ORG_SEAL] Recherche directe dans le bucket organization-seals');
+              
+              const { data: sealFiles, error: sealListError } = await supabase.storage
+                .from('organization-seals')
+                .list('', { 
+                  sortBy: { column: 'created_at', order: 'desc' },
+                  limit: 1
+                });
+                
+              if (sealListError) {
+                console.error('‚ùå [ORG_SEAL] Erreur lors de la recherche dans le bucket:', sealListError);
+              } else if (sealFiles && sealFiles.length > 0) {
+                const sealFile = sealFiles[0];
+                console.log('‚úÖ [ORG_SEAL] Fichier trouv√© dans le bucket:', sealFile.name);
+                
+                const { data: urlData } = await supabase.storage
+                  .from('organization-seals')
+                  .getPublicUrl(sealFile.name);
+                  
+                if (urlData && urlData.publicUrl) {
+            const timestamp = Date.now();
+                  organizationSealUrl = `${urlData.publicUrl.split('?')[0]}?t=${timestamp}&forcereload=true`;
+                  console.log('‚úÖ [ORG_SEAL] URL g√©n√©r√©e depuis le bucket:', organizationSealUrl);
+                }
+              } else {
+                console.log('‚ö†Ô∏è [ORG_SEAL] Aucun fichier trouv√© dans le bucket organization-seals');
+              }
             }
-            
-            // Forcer un rafra√Æchissement
-            setTimeout(() => {
-              setShouldRefresh(prev => !prev);
-            }, 100);
+          } catch (settingsErr) {
+            console.error('‚ùå [ORG_SEAL] Exception lors de la recherche dans settings:', settingsErr);
           }
-          
-          return;
         }
+          
+        // Mettre √† jour les √©tats si on a trouv√© des signatures/tampons
         
-        console.log('‚úÖ [SUPABASE] Signatures trouv√©es dans Supabase:', signatureData);
+        // AJOUT: Mettre √† jour l'√©tat de la signature du repr√©sentant
+        if (representativeSigUrl) {
+          safeSetRepresentativeSignature(representativeSigUrl);
+          console.log('‚úÖ [DEBUG] safeSetRepresentativeSignature CALLED with URL:', representativeSigUrl);
+          setIsSigned(true); // Consid√©rer comme sign√© si le repr√©sentant a sign√©
+        }
         
-        // Variables pour stocker les derni√®res signatures de chaque type
-        let participantSigUrl = null;
-        let companySealUrl = null;
+        if (companySealUrl) {
+          safeSetCompanySeal(companySealUrl);
+          console.log('‚úÖ [DEBUG] safeSetCompanySeal CALLED with URL:', companySealUrl);
+        }
         
-        // Extraire les signatures et tampons
-        for (const sig of signatureData) {
-          if (!sig.signature_url) continue;
-          
-          const baseUrl = sig.signature_url.split('?')[0];
-          const timestamp = Date.now();
-          const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-          
-          if (sig.signature_type === 'participant' || sig.signature_type === 'representative') {
-            participantSigUrl = antiCacheUrl;
-            console.log('‚úÖ [SUPABASE] Signature participant trouv√©e:', antiCacheUrl.substring(0, 50) + '...');
-          } else if (sig.signature_type === 'companySeal') {
-            companySealUrl = antiCacheUrl;
-            console.log('‚úÖ [SUPABASE] Tampon entreprise trouv√©:', antiCacheUrl.substring(0, 50) + '...');
-          }
+        if (trainerSigUrl) {
+          safeSetTrainerSignature(trainerSigUrl);
+          console.log('‚úÖ [DEBUG] safeSetTrainerSignature CALLED with URL:', trainerSigUrl);
+          setHasTrainerSignature(true);
         }
         
-        // Mettre √† jour les √©tats
-        if (participantSigUrl) {
-            safeSetParticipantSignature(participantSigUrl);
-            setIsSigned(true);
-            setHasParticipantSignature(true);
-          }
-          
-        if (companySealUrl) {
-            safeSetCompanySeal(companySealUrl);
-          }
+        if (organizationSealUrl) {
+          console.log('‚úÖ [ORG_SEAL] Mise √† jour du tampon de l\'organisme avec URL:', organizationSealUrl);
+          safeSetOrganizationSeal(organizationSealUrl);
+        } else {
+          console.error('‚ùå [ORG_SEAL] √âchec de toutes les tentatives de r√©cup√©ration du tampon de l\'organisme');
+        }
           
-        // Mettre √† jour le cache global
-          GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
-          participantSig: participantSigUrl,
+        // Mettre √† jour le cache global et localStorage (MODIFI√â)
+        if (representativeSigUrl || companySealUrl || trainerSigUrl || organizationSealUrl) {
+          const cacheData: SignatureCacheItem = {
+            participantSig: null, // Participant ne signe pas la convention
+            representativeSig: representativeSigUrl, 
           companySeal: companySealUrl,
-          // Conserver le tampon de l'organisme s'il existe d√©j√†
-          organizationSeal: organizationSeal
-        });
+            trainerSig: trainerSigUrl,
+            organizationSeal: organizationSealUrl,
+            timestamp: Date.now()
+          };
+          
+          GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, cacheData);
         
         // Mettre √† jour le localStorage
         try {
           const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
-          const cacheData = {
-            participantSig: participantSigUrl,
-            companySeal: companySealUrl,
-            organizationSeal: organizationSeal,
-            timestamp: Date.now()
-          };
           localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
-          console.log('üíæ [SUPABASE] Cache sauvegard√© dans localStorage');
+            // SUPPRIM√â: Log cache
         } catch (e) {
-          console.error('‚ùå [SUPABASE] Erreur lors de la sauvegarde localStorage:', e);
-        }
-        
-        // Forcer un rafra√Æchissement
-        if (participantSigUrl || companySealUrl) {
-            setTimeout(() => {
-              setShouldRefresh(prev => !prev);
-            }, 100);
+            console.error('‚ùå [CACHE] Erreur lors de la mise √† jour du cache:', e);
+          }
+      
+          // SUPPRIM√â: Rafra√Æchissement forc√©
+        } else {
+          // console.log('‚ö†Ô∏è [SIGNATURES] Aucune signature ni tampon trouv√©'); // Log conserv√© pour info
         }
       } catch (error) {
-        console.error('‚ùå [SUPABASE] Erreur lors du chargement des signatures depuis Supabase:', error);
+        console.error('‚ùå [GLOBAL] Erreur lors du chargement des signatures:', error);
       } finally {
         signaturesLoadedRef.current = true;
       }
@@ -754,22 +799,22 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
     
     // Lancer le chargement asynchrone
     loadSignaturesFromSupabase();
-  }, [training.id, participant.id, safeSetParticipantSignature, safeSetCompanySeal, organizationSeal]);
+  }, [training.id, participant.id, safeSetParticipantSignature, safeSetCompanySeal, safeSetOrganizationSeal, organizationSeal, company, trainerSignature, safeSetRepresentativeSignature]);
 
-  // Moniteur d'√©tat des signatures
+  // Moniteur d'√©tat des signatures SIMPLIFI√â
   useEffect(() => {
-    console.log('üëÅÔ∏è [MONITOR] √âtat des signatures:', {
-      participantSignature: participantSignature ? '‚úÖ Pr√©sente' : '‚ùå Absente',
-      companySeal: companySeal ? '‚úÖ Pr√©sent' : '‚ùå Absent',
-      trainerSignature: trainerSignature ? '‚úÖ Pr√©sente' : '‚ùå Absente',
-      signaturesLocked: signaturesLocked ? 'üîí Verrouill√©es' : 'üîì D√©verrouill√©es'
-    });
-  }, [participantSignature, companySeal, trainerSignature, signaturesLocked]);
+    // console.log('üëÅÔ∏è [MONITOR] √âtat actuel:', { // Log supprim√©
+    //   Repr√©sentant: representativeSignature ? '‚úÖ' : '‚ùå',
+    //   TamponEnt: companySeal ? '‚úÖ' : '‚ùå',
+    //   Formateur: trainerSignature ? '‚úÖ' : '‚ùå',
+    //   TamponOrg: organizationSeal ? '‚úÖ' : '‚ùå'
+    // });
+  }, [representativeSignature, companySeal, trainerSignature, organizationSeal]);
 
   // Ajouter une fonction pour charger la signature du formateur depuis Supabase
   const loadTrainerSignature = async () => {
     try {
-      console.log('üîÑ [TRAINER] Chargement de la signature du formateur pour la formation:', training.id);
+      // console.log('üîÑ', '[TRAINER]', 'Chargement signature formateur...'); // Log supprim√©
       
       // R√©cup√©rer d'abord depuis la table documents
       const { data: trainerDocs, error: docsError } = await supabase
@@ -782,9 +827,10 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         .limit(1);
         
       if (docsError) {
-        console.error('‚ùå [TRAINER] Erreur lors de la recherche dans la table documents:', docsError);
+        // console.error('‚ùå [TRAINER] ERROR', 'Erreur recherche documents:', docsError); // Log supprim√©
       } else if (trainerDocs && trainerDocs.length > 0 && trainerDocs[0].file_url) {
-        console.log('‚úÖ [TRAINER] Signature du formateur trouv√©e dans documents:', trainerDocs[0].file_url.substring(0, 50) + '...');
+        // console.log('‚úÖ', '[TRAINER]', 'Signature formateur trouv√©e dans documents'); // Log supprim√©
+        // console.log('‚úÖ [TRAINER] Signature du formateur trouv√©e dans documents:', trainerDocs[0].file_url.substring(0, 50) + '...'); // Log supprim√©
         
         // Ajouter un anti-cache √† l'URL
         const baseUrl = trainerDocs[0].file_url.split('?')[0];
@@ -800,54 +846,25 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         return;
       }
       
-      // Si rien n'est trouv√© dans documents, essayer avec document_signatures
-      const { data: trainerSigData, error: sigError } = await supabase
-        .from('document_signatures')
-        .select('signature_url')
-        .eq('training_id', training.id)
-        .eq('type', 'convention')
-        .eq('signature_type', 'trainer')
-        .order('created_at', { ascending: false })
-        .limit(1);
-        
-      if (sigError) {
-        console.error('‚ùå [TRAINER] Erreur lors de la recherche dans document_signatures:', sigError);
-      } else if (trainerSigData && trainerSigData.length > 0 && trainerSigData[0].signature_url) {
-        console.log('‚úÖ [TRAINER] Signature formateur trouv√©e dans document_signatures:', trainerSigData[0].signature_url.substring(0, 50) + '...');
-        
-        // Ajouter un anti-cache √† l'URL
-        const baseUrl = trainerSigData[0].signature_url.split('?')[0];
-        const timestamp = Date.now();
-        const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-        
-        // Mettre √† jour l'√©tat
-        safeSetTrainerSignature(antiCacheUrl);
-        
-        // Mettre √† jour le cache
-        updateSignatureCache(undefined, undefined, undefined, antiCacheUrl);
-        
-        return;
-      }
-      
       // En dernier recours, rechercher dans le bucket signatures
-      const { data: storageFiles, error: storageError } = await supabase.storage
-        .from('signatures')
-        .list('', { 
+        const { data: storageFiles, error: storageError } = await supabase.storage
+          .from('signatures')
+          .list('', { 
           search: `trainer_convention_${training.id}`,
-          sortBy: { column: 'created_at', order: 'desc' }
-        });
+            sortBy: { column: 'created_at', order: 'desc' }
+          });
         
-      if (storageError) {
-        console.error('‚ùå [TRAINER] Erreur lors de la recherche dans le bucket signatures:', storageError);
-      } else if (storageFiles && storageFiles.length > 0) {
+        if (storageError) {
+        // console.error('‚ùå [TRAINER] ERROR', 'Erreur recherche bucket:', storageError); // Log supprim√©
+        } else if (storageFiles && storageFiles.length > 0) {
         const sigFile = storageFiles[0];
         // G√©n√©rer l'URL du fichier trouv√©
-        const { data: urlData } = await supabase.storage
-          .from('signatures')
+            const { data: urlData } = await supabase.storage
+              .from('signatures')
           .getPublicUrl(sigFile.name);
-          
-        if (urlData && urlData.publicUrl) {
-          console.log('‚úÖ [TRAINER] Signature formateur trouv√©e dans le bucket:', urlData.publicUrl.substring(0, 50) + '...');
+            
+            if (urlData && urlData.publicUrl) {
+          // console.log('‚úÖ [TRAINER]', 'Signature formateur trouv√©e dans le bucket:', urlData.publicUrl.substring(0, 50) + '...'); // Log supprim√©
           
           // Ajouter un anti-cache √† l'URL
           const baseUrl = urlData.publicUrl.split('?')[0];
@@ -864,10 +881,10 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         }
       }
       
-      console.log('‚ÑπÔ∏è [TRAINER] Aucune signature de formateur trouv√©e pour cette formation');
+      // console.warn('‚ÑπÔ∏è [TRAINER] Aucune signature de formateur trouv√©e pour cette formation'); // Log supprim√©
       
     } catch (error) {
-      console.error('‚ùå [TRAINER] Erreur lors du chargement de la signature du formateur:', error);
+      // console.error('‚ùå [TRAINER] ERROR', 'Erreur chargement signature formateur:', error); // Log supprim√©
     }
   };
 
@@ -875,7 +892,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   useEffect(() => {
     // Charger depuis le cache d'abord
     if (initialSignatures.trainerSig) {
-      console.log('‚úÖ [INIT] Signature formateur trouv√©e dans le cache local');
+      // console.log('‚úÖ', '[INIT]', 'Signature formateur trouv√©e cache local'); // Log supprim√©
       safeSetTrainerSignature(initialSignatures.trainerSig);
     } else {
       // Charger depuis Supabase si pas dans le cache
@@ -883,323 +900,69 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
     }
   }, [training.id, safeSetTrainerSignature, initialSignatures.trainerSig]);
 
-  // Effet pour charger les signatures depuis Supabase (asynchrone, apr√®s le premier rendu)
-  useEffect(() => {
-    const loadSignaturesFromSupabase = async () => {
-      try {
-        // V√©rifier si nous avons charg√© les signatures r√©cemment
-        const now = Date.now();
-        const timeSinceLastLoad = now - lastSignatureLoadTimeRef.current;
-        
-        // Ne charger que toutes les 30 secondes maximum
-        if (timeSinceLastLoad < 30000 && lastSignatureLoadTimeRef.current > 0) {
-          console.log(`‚è±Ô∏è [THROTTLE] Chargement des signatures ignor√© (dernier chargement il y a ${Math.round(timeSinceLastLoad/1000)}s, minimum 30s)`);
-        return;
-      }
-      
-        // Mettre √† jour le timestamp du dernier chargement
-        lastSignatureLoadTimeRef.current = now;
-        
-        console.log('üîÑ [SUPABASE] Chargement des signatures depuis Supabase:', {
-          training_id: training.id,
-          user_id: participant.id,
-          type: 'convention'
-        });
-        
-        // Toujours charger les signatures de Supabase, m√™me si on a d√©j√† v√©rifi√© (pour les r√©ouvertures de modale)
-        signaturesLoadedRef.current = false;
-        
-        // Requ√™te Supabase pour les signatures les plus r√©centes
-        const { data: signatureData, error: signatureError } = await supabase
-          .from('document_signatures')
-          .select('*')
-          .eq('training_id', training.id)
-          .eq('user_id', participant.id)
-          .eq('type', 'convention')
-          .order('created_at', { ascending: false });
-          
-        if (signatureError) {
-          console.error('‚ùå [SUPABASE] Erreur lors de la r√©cup√©ration des signatures:', signatureError);
-          
-          // Si √©chec avec document_signatures, essayer avec la table documents
-          console.log('‚ö†Ô∏è [SUPABASE] Tentative de r√©cup√©ration via la table documents');
-          
-          const { data: documentsData, error: documentsError } = await supabase
-            .from('documents')
-            .select('*')
-            .eq('training_id', training.id)
-            .eq('user_id', participant.id)
-            .eq('type', 'convention')
-            .order('created_at', { ascending: false });
-          
-          if (documentsError || !documentsData || documentsData.length === 0) {
-            console.log('‚ö†Ô∏è [SUPABASE] Aucun document trouv√© dans la table documents');
-            return;
-          }
-          
-          // Traiter les donn√©es de la table documents
-          let participantSigUrl = null;
-          let companySealUrl = null;
-          
-          for (const doc of documentsData) {
-            if (!doc.file_url) continue;
-            
-            const baseUrl = doc.file_url.split('?')[0];
-            const timestamp = Date.now();
-            const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-            
-            if (doc.title === "Signature de l'apprenant") {
-              participantSigUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Signature participant trouv√©e dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            } else if (doc.title === "Tampon de l'entreprise") {
-              companySealUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Tampon entreprise trouv√© dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            }
-          }
-          
-          // Mettre √† jour les √©tats si on a trouv√© des signatures
-          if (participantSigUrl) {
-            safeSetParticipantSignature(participantSigUrl);
-            setIsSigned(true);
-            setHasParticipantSignature(true);
-          }
-          
-          if (companySealUrl) {
-            safeSetCompanySeal(companySealUrl);
-          }
-          
-          // Mettre √† jour le cache global
-          if (participantSigUrl || companySealUrl) {
-            GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
-              participantSig: participantSigUrl,
-              companySeal: companySealUrl,
-              // Conserver le tampon de l'organisme s'il existe d√©j√†
-              organizationSeal: organizationSeal
-            });
-            
-            // Mettre √† jour le localStorage
-            try {
-              const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
-              const cacheData = {
-                participantSig: participantSigUrl,
-                companySeal: companySealUrl,
-                organizationSeal: organizationSeal,
-                timestamp: Date.now()
-              };
-              localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
-              console.log('üíæ [SUPABASE] Cache sauvegard√© dans localStorage');
-            } catch (e) {
-              console.error('‚ùå [SUPABASE] Erreur lors de la sauvegarde localStorage:', e);
-            }
-            
-            // Forcer un rafra√Æchissement
-            setTimeout(() => {
-              setShouldRefresh(prev => !prev);
-            }, 100);
-          }
-          
-          return;
-        }
-        
-        if (!signatureData || signatureData.length === 0) {
-          console.log('‚ÑπÔ∏è [SUPABASE] Aucune signature trouv√©e dans document_signatures, tentative avec documents');
-          
-          // Essayer avec la table documents
-          const { data: documentsData, error: documentsError } = await supabase
-            .from('documents')
-            .select('*')
-            .eq('training_id', training.id)
-            .eq('user_id', participant.id)
-            .eq('type', 'convention')
-            .order('created_at', { ascending: false });
-          
-          if (documentsError || !documentsData || documentsData.length === 0) {
-            console.log('‚ö†Ô∏è [SUPABASE] Aucun document trouv√© dans la table documents non plus');
-            return;
-          }
-          
-          // Traiter les donn√©es de la table documents
-          let participantSigUrl = null;
-          let companySealUrl = null;
-          
-          for (const doc of documentsData) {
-            if (!doc.file_url) continue;
-            
-            const baseUrl = doc.file_url.split('?')[0];
-            const timestamp = Date.now();
-            const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-            
-            if (doc.title === "Signature de l'apprenant") {
-              participantSigUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Signature participant trouv√©e dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            } else if (doc.title === "Tampon de l'entreprise") {
-              companySealUrl = antiCacheUrl;
-              console.log('‚úÖ [SUPABASE] Tampon entreprise trouv√© dans documents:', antiCacheUrl.substring(0, 50) + '...');
-            }
-          }
-          
-          // Mettre √† jour les √©tats si on a trouv√© des signatures
-          if (participantSigUrl) {
-            safeSetParticipantSignature(participantSigUrl);
-            setIsSigned(true);
-            setHasParticipantSignature(true);
-          }
-          
-          if (companySealUrl) {
-            safeSetCompanySeal(companySealUrl);
-          }
-          
-          // Mettre √† jour le cache global
-          if (participantSigUrl || companySealUrl) {
-            GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
-              participantSig: participantSigUrl,
-              companySeal: companySealUrl,
-              // Conserver le tampon de l'organisme s'il existe d√©j√†
-              organizationSeal: organizationSeal
-            });
-            
-            // Mettre √† jour le localStorage
-            try {
-              const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
-              const cacheData = {
-                participantSig: participantSigUrl,
-                companySeal: companySealUrl,
-                organizationSeal: organizationSeal,
-                timestamp: Date.now()
-              };
-              localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
-              console.log('üíæ [SUPABASE] Cache sauvegard√© dans localStorage');
-            } catch (e) {
-              console.error('‚ùå [SUPABASE] Erreur lors de la sauvegarde localStorage:', e);
-            }
-            
-            // Forcer un rafra√Æchissement
-            setTimeout(() => {
-              setShouldRefresh(prev => !prev);
-            }, 100);
-          }
-          
-          return;
-        }
-        
-        console.log('‚úÖ [SUPABASE] Signatures trouv√©es dans Supabase:', signatureData);
-        
-        // Variables pour stocker les derni√®res signatures de chaque type
-        let participantSigUrl = null;
-        let companySealUrl = null;
-        
-        // Extraire les signatures et tampons
-        for (const sig of signatureData) {
-          if (!sig.signature_url) continue;
-          
-          const baseUrl = sig.signature_url.split('?')[0];
-          const timestamp = Date.now();
-          const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-          
-          if (sig.signature_type === 'participant' || sig.signature_type === 'representative') {
-            participantSigUrl = antiCacheUrl;
-            console.log('‚úÖ [SUPABASE] Signature participant trouv√©e:', antiCacheUrl.substring(0, 50) + '...');
-          } else if (sig.signature_type === 'companySeal') {
-            companySealUrl = antiCacheUrl;
-            console.log('‚úÖ [SUPABASE] Tampon entreprise trouv√©:', antiCacheUrl.substring(0, 50) + '...');
-          }
-        }
-        
-        // Mettre √† jour les √©tats
-        if (participantSigUrl) {
-            safeSetParticipantSignature(participantSigUrl);
-            setIsSigned(true);
-            setHasParticipantSignature(true);
-          }
-          
-        if (companySealUrl) {
-            safeSetCompanySeal(companySealUrl);
-          }
-          
-        // Mettre √† jour le cache global
-          GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
-          participantSig: participantSigUrl,
-          companySeal: companySealUrl,
-          // Conserver le tampon de l'organisme s'il existe d√©j√†
-          organizationSeal: organizationSeal
-        });
-        
-        // Mettre √† jour le localStorage
-        try {
-          const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
-          const cacheData = {
-            participantSig: participantSigUrl,
-            companySeal: companySealUrl,
-            organizationSeal: organizationSeal,
-            timestamp: Date.now()
-          };
-          localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
-          console.log('üíæ [SUPABASE] Cache sauvegard√© dans localStorage');
-        } catch (e) {
-          console.error('‚ùå [SUPABASE] Erreur lors de la sauvegarde localStorage:', e);
-        }
-        
-        // Forcer un rafra√Æchissement
-        if (participantSigUrl || companySealUrl) {
-            setTimeout(() => {
-              setShouldRefresh(prev => !prev);
-            }, 100);
-        }
-      } catch (error) {
-        console.error('‚ùå [SUPABASE] Erreur lors du chargement des signatures depuis Supabase:', error);
-      } finally {
-        signaturesLoadedRef.current = true;
-      }
-    };
-    
-    // Lancer le chargement asynchrone
-    loadSignaturesFromSupabase();
-  }, [training.id, participant.id, safeSetParticipantSignature, safeSetCompanySeal, organizationSeal]);
+  // Effet doublon de chargement des signatures supprim√©
 
   // Effet pour v√©rifier l'accessibilit√© des tampons d√®s le chargement
   useEffect(() => {
     const verifySeals = async () => {
-      if (companySeal || organizationSeal) {
-        console.log('üîç [INITIALIZATION] V√©rification de l\'accessibilit√© des tampons');
+      const currentCompanySeal = companySeal;
+      const currentOrganizationSeal = organizationSeal;
+      
+      if (currentCompanySeal || currentOrganizationSeal) {
+        // console.log('üîç [INIT] Verifying seal accessibility'); // Log supprim√©
         
         try {
-          // Importer de mani√®re dynamique pour √©viter les probl√®mes de r√©f√©rence circulaire
           const { checkSealAccess } = await import('../utils/SignatureUtils');
           
-          // V√©rifier et potentiellement optimiser les URLs des tampons
-          const { companySeal: optimizedCompanySeal, organizationSeal: optimizedOrgSeal, diagnosticMessage } = 
-            await checkSealAccess({
-              companySeal,
-              organizationSeal
-            });
+          const { 
+            companySeal: optimizedCompanySeal, 
+            organizationSeal: optimizedOrgSeal, 
+            diagnosticMessage 
+          } = await checkSealAccess({
+            companySeal: currentCompanySeal,
+            organizationSeal: currentOrganizationSeal
+          });
           
-          console.log(`üîç [INITIALIZATION] Diagnostic des tampons: ${diagnosticMessage}`);
+          // console.log(`üîç [INIT] Seal diagnostic:`, diagnosticMessage); // Log supprim√©
           
-          // Mettre √† jour les URLs si elles ont √©t√© optimis√©es
-          if (optimizedCompanySeal && optimizedCompanySeal !== companySeal) {
-            console.log('üîç [INITIALIZATION] Mise √† jour de l\'URL du tampon d\'entreprise');
-            setCompanySeal(optimizedCompanySeal);
+          // Fonction pour extraire l'URL de base sans les param√®tres
+          const getBaseUrl = (url: string | null | undefined): string | null => {
+            if (!url) return null;
+            return url.split('?')[0];
+          };
+          
+          const currentCompanySealBase = getBaseUrl(currentCompanySeal);
+          const optimizedCompanySealBase = getBaseUrl(optimizedCompanySeal);
+          const currentOrganizationSealBase = getBaseUrl(currentOrganizationSeal);
+          const optimizedOrgSealBase = getBaseUrl(optimizedOrgSeal);
+
+          // Comparer les URLs de base
+          if (optimizedCompanySealBase && optimizedCompanySealBase !== currentCompanySealBase) {
+            // console.log('üîÑ [INIT] Updating company seal URL (base different)'); // Log supprim√©
+            safeSetCompanySeal(optimizedCompanySeal); // Utiliser l'URL optimis√©e compl√®te (avec timestamp)
+          } else {
+             // console.log('‚úÖ [INIT] Company seal base URL up-to-date or unchanged'); // Log supprim√©
           }
           
-          if (optimizedOrgSeal && optimizedOrgSeal !== organizationSeal) {
-            console.log('üîç [INITIALIZATION] Mise √† jour de l\'URL du tampon d\'organisme');
-            setOrganizationSeal(optimizedOrgSeal);
+          // Comparer les URLs de base
+          if (optimizedOrgSealBase && optimizedOrgSealBase !== currentOrganizationSealBase) {
+            // console.log('üîÑ [INIT] Updating organization seal URL (base different)'); // Log supprim√©
+            safeSetOrganizationSeal(optimizedOrgSeal); // Utiliser l'URL optimis√©e compl√®te (avec timestamp)
+          } else {
+             // console.log('‚úÖ [INIT] Organization seal base URL up-to-date or unchanged'); // Log supprim√©
           }
           
-          // Retourner le r√©sultat pour un usage ult√©rieur
-          return { companySeal: optimizedCompanySeal, organizationSeal: optimizedOrgSeal };
-        } catch (error) {
-          console.error('‚ùå [ERROR] Erreur lors de la v√©rification des tampons:', error);
-          return { companySeal, organizationSeal };
+          setSealsVerified(true);
+          
+    } catch (error) {
+          // console.error('‚ùå [ERROR] Error verifying seals:', error); // Log supprim√©
+          setSealsVerified(true); // Avoid loop on error
         }
       }
-      
-      return { companySeal, organizationSeal };
     };
     
-    // Lancer la v√©rification
     verifySeals();
-  }, [companySeal, organizationSeal]);
+  }, [companySeal, organizationSeal, safeSetCompanySeal, safeSetOrganizationSeal]);
 
   useEffect(() => {
     // Cr√©er un √©l√©ment div pour le portail s'il n'existe pas d√©j√†
@@ -1278,7 +1041,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           .single();
 
         if (settingsError) {
-          console.error('Erreur lors de la r√©cup√©ration des param√®tres:', settingsError);
+          // console.error('Erreur lors de la r√©cup√©ration des param√®tres:', settingsError); // Log supprim√©
         } else if (settingsData) {
           // Transformer les donn√©es dans le format attendu par le template
           const formattedSettings: OrganizationSettings = {
@@ -1291,7 +1054,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             representative_name: 'Nicolas Cleton',
             representative_title: 'Pr√©sident',
             activity_declaration_number: settingsData.training_number || '32 59 10753 59',
-            organization_seal_url: settingsData.organization_seal_url
+            // organization_seal_url: settingsData.organization_seal_url // Propri√©t√© supprim√©e car non existante dans le type import√©
           };
           setOrganizationSettings(formattedSettings);
         }
@@ -1304,10 +1067,10 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           .single();
         
         if (fullTrainingError) {
-          console.error('Erreur lors de la r√©cup√©ration des donn√©es compl√®tes de la formation:', fullTrainingError);
+          // console.error('Erreur lors de la r√©cup√©ration des donn√©es compl√®tes de la formation:', fullTrainingError); // Log supprim√©
         } else if (fullTrainingData) {
-          console.log('‚úÖ [DATA] Donn√©es compl√®tes de la formation r√©cup√©r√©es:', fullTrainingData);
-          console.log('‚úÖ [PRICE] Prix r√©cup√©r√©:', fullTrainingData.price);
+          // console.log('‚úÖ [DATA] Donn√©es compl√®tes de la formation r√©cup√©r√©es:', fullTrainingData); // Log supprim√©
+          // console.log('‚úÖ [PRICE] Prix r√©cup√©r√©:', fullTrainingData.price); // Log supprim√©
           
           // S'assurer que le prix est bien un nombre ou null
           const price = fullTrainingData.price !== undefined ? 
@@ -1325,8 +1088,8 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             material_elements: parseJsonField(fullTrainingData.material_elements) || training.material_elements,
           };
           
-          console.log('üîÑ [DATA] Donn√©es de formation pars√©es:', parsedTraining);
-          console.log('üîÑ [PRICE] Prix apr√®s parsing:', parsedTraining.price);
+          // console.log('üîÑ [DATA] Donn√©es de formation pars√©es:', parsedTraining); // Log supprim√©
+          // console.log('üîÑ [PRICE] Prix apr√®s parsing:', parsedTraining.price); // Log supprim√©
           
           // Mise √† jour directe des propri√©t√©s de l'objet training
           Object.assign(training, parsedTraining);
@@ -1341,11 +1104,11 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             .single();
 
           if (companyError) {
-            console.error('Erreur lors de la r√©cup√©ration de la soci√©t√©:', companyError);
+            // console.error('Erreur lors de la r√©cup√©ration de la soci√©t√©:', companyError); // Log supprim√©
             
             // Si pas de company_id mais que le participant a une entreprise renseign√©e, essayer de la trouver
             if (participant.company) {
-              console.log('üîç [DEBUG] Pas de company_id trouv√©e, recherche par nom:', participant.company);
+              // console.log('üîç [DEBUG] Pas de company_id trouv√©e, recherche par nom:', participant.company); // Log supprim√©
               
               const { data: companyByNameData, error: companyByNameError } = await supabase
                 .from('companies')
@@ -1355,7 +1118,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
                 .single();
               
               if (companyByNameError) {
-                console.log('‚ö†Ô∏è [WARN] Entreprise non trouv√©e par nom:', companyByNameError);
+                // console.warn('‚ö†Ô∏è [WARN] Entreprise non trouv√©e par nom:', companyByNameError); // Log supprim√©
                 
                 // Cr√©er une entreprise de base √† partir du nom
                 setCompany({
@@ -1366,7 +1129,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
                   siret: participant.company ? 'SIRET non renseign√©' : '√Ä compl√©ter'
                 });
               } else if (companyByNameData) {
-                console.log('‚úÖ [SUCCESS] Entreprise trouv√©e par nom:', companyByNameData);
+                // console.log('‚úÖ [SUCCESS] Entreprise trouv√©e par nom:', companyByNameData); // Log supprim√©
                 setCompany(companyByNameData);
               }
             } else {
@@ -1384,7 +1147,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           }
         } else if (participant.company) {
           // Si pas de company_id mais que le participant a une entreprise renseign√©e, essayer de la trouver
-          console.log('üîç [DEBUG] Pas de company_id, recherche par nom:', participant.company);
+          // console.log('üîç [DEBUG] Pas de company_id, recherche par nom:', participant.company); // Log supprim√©
           
           const { data: companyByNameData, error: companyByNameError } = await supabase
             .from('companies')
@@ -1394,7 +1157,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             .single();
           
           if (companyByNameError) {
-            console.log('‚ö†Ô∏è [WARN] Entreprise non trouv√©e par nom:', companyByNameError);
+            // console.warn('‚ö†Ô∏è [WARN] Entreprise non trouv√©e par nom:', companyByNameError); // Log supprim√©
             
             // Cr√©er une entreprise de base √† partir du nom
             setCompany({
@@ -1405,7 +1168,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
               siret: participant.company ? 'SIRET non renseign√©' : '√Ä compl√©ter'
             });
           } else if (companyByNameData) {
-            console.log('‚úÖ [SUCCESS] Entreprise trouv√©e par nom:', companyByNameData);
+            // console.log('‚úÖ [SUCCESS] Entreprise trouv√©e par nom:', companyByNameData); // Log supprim√©
             setCompany(companyByNameData);
           }
         } else {
@@ -1419,88 +1182,13 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           });
                       }
                     } catch (error) {
-        console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error);
+        // console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error); // Log supprim√©
                     }
                   };
                   
                   fetchCompanyAndSettings();
   }, [training.company_id, participant.company]);
 
-  // Apr√®s avoir re√ßu la signature du participant
-  useEffect(() => {
-    if (participantSignature) {
-      setHasParticipantSignature(true);
-    }
-  }, [participantSignature]);
-
-  // Effet pour r√©cup√©rer le tampon de l'organisme et le m√©moriser
-  useEffect(() => {
-    const fetchOrganizationSeal = async () => {
-      try {
-        // D'abord v√©rifier dans le cache
-        const cachedSeal = initialSignatures.organizationSeal;
-        if (cachedSeal) {
-          console.log('‚úÖ [ORG_SEAL] Tampon trouv√© dans le cache:', cachedSeal);
-          setOrganizationSeal(cachedSeal);
-          // Actualiser aussi le cache pour ne pas perdre l'information
-          updateSignatureCache(undefined, undefined, cachedSeal);
-          return;
-        }
-        
-        // V√©rifier si nous avons d√©j√† une URL de tampon dans les param√®tres de l'organisme
-        if (organizationSettings?.organization_seal_url) {
-          console.log('‚úÖ [ORG_SEAL] URL du tampon trouv√©e dans les param√®tres:', organizationSettings.organization_seal_url);
-          
-          // Ajouter un param√®tre anticache
-          const baseUrl = organizationSettings.organization_seal_url.split('?')[0];
-          const timestamp = Date.now();
-          const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-          
-          // Attribuer directement l'URL au tampon d'organisme
-          setOrganizationSeal(antiCacheUrl);
-          // Mettre √† jour le cache √©galement
-          updateSignatureCache(undefined, undefined, antiCacheUrl);
-          return;
-        }
-        
-        // Si aucune URL n'est pr√©sente dans les param√®tres, rechercher dans les signatures
-        const { data: sealData, error: sealError } = await supabase
-          .from('document_signatures')
-          .select('signature_url')
-          .eq('signature_type', 'organizationSeal')
-          .order('created_at', { ascending: false })
-          .limit(1)
-          .single();
-          
-        if (sealError) {
-          console.log('‚ö†Ô∏è [ORG_SEAL] Aucun tampon trouv√© dans document_signatures:', sealError);
-          return;
-        }
-        
-        if (sealData && sealData.signature_url) {
-          console.log('‚úÖ [ORG_SEAL] Tampon trouv√© dans document_signatures:', sealData.signature_url);
-          
-          // Ajouter un param√®tre anticache
-          const baseUrl = sealData.signature_url.split('?')[0];
-          const timestamp = Date.now();
-          const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-          
-          // Attribuer l'URL au tampon d'organisme
-          setOrganizationSeal(antiCacheUrl);
-          // Mettre √† jour le cache √©galement
-          updateSignatureCache(undefined, undefined, antiCacheUrl);
-        }
-      } catch (error) {
-        console.error('‚ùå [ORG_SEAL] Erreur lors de la r√©cup√©ration du tampon d\'organisme:', error);
-      }
-    };
-    
-    // Ex√©cuter seulement si nous avons les param√®tres de l'organisme et que le tampon n'est pas d√©j√† d√©fini
-    if ((organizationSettings || initialSignatures.organizationSeal) && !organizationSeal) {
-      fetchOrganizationSeal();
-    }
-  }, [organizationSettings, organizationSeal, initialSignatures, updateSignatureCache]);
-
   // Lors de la signature locale
   const handleSignatureComplete = (dataURL: string) => {
     setLocalSignatureDataURL(dataURL);
@@ -1521,7 +1209,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
       const blobUrl = URL.createObjectURL(pdfBlob);
       window.open(blobUrl, '_blank');
     } catch (error) {
-      console.error('Erreur lors de la g√©n√©ration du PDF:', error);
+      // console.error('Erreur lors de la g√©n√©ration du PDF:', error); // Log supprim√©
       alert('Une erreur est survenue lors de la g√©n√©ration du PDF. Veuillez r√©essayer.');
     }
   };
@@ -1532,7 +1220,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
       const date = new Date(dateString);
       return format(date, 'dd/MM/yyyy', { locale: fr });
     } catch (e) {
-      console.error('Erreur de formatage de date:', e);
+      // console.error('Erreur de formatage de date:', e); // Log supprim√©
       return dateString;
     }
   };
@@ -1623,34 +1311,34 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
     const result: { participantImage?: HTMLImageElement; representativeImage?: HTMLImageElement } = {};
     
     if (!pdfContentRef.current) {
-      console.log('üîç [DEBUG] pdfContentRef est null, impossible de chercher les signatures');
+      // console.log('üîç [DEBUG] pdfContentRef est null, impossible de chercher les signatures'); // Log supprim√©
       return result;
     }
     
     // Rechercher avec les s√©lecteurs les plus pr√©cis en premier
     // 1. Rechercher par attributs data-* sp√©cifiques (m√©thode la plus fiable)
     const dataSignatureImages = pdfContentRef.current.querySelectorAll('[data-signature="true"]');
-    console.log(`üîç [DEBUG] ${dataSignatureImages.length} images avec attribut data-signature="true" trouv√©es`);
+    // console.log(`üîç [DEBUG] ${dataSignatureImages.length} images avec attribut data-signature="true" trouv√©es`); // Log supprim√©
     
     if (dataSignatureImages.length > 0) {
       dataSignatureImages.forEach((img) => {
         const imgEl = img as HTMLImageElement;
         const type = imgEl.getAttribute('data-signature-type');
-        console.log(`üîç [DEBUG] Image de signature trouv√©e avec type: ${type}`, imgEl);
+        // console.log(`üîç [DEBUG] Image de signature trouv√©e avec type: ${type}`, imgEl); // Log supprim√©
         
         if (type === 'participant') {
           result.participantImage = imgEl;
-          console.log('‚úÖ [DEBUG] Image de signature du participant trouv√©e dans le document');
+          // console.log('‚úÖ [DEBUG] Image de signature du participant trouv√©e dans le document'); // Log supprim√©
         } else if (type === 'representative') {
           result.representativeImage = imgEl;
-          console.log('‚úÖ [DEBUG] Image de signature du repr√©sentant trouv√©e dans le document');
+          // console.log('‚úÖ [DEBUG] Image de signature du repr√©sentant trouv√©e dans le document'); // Log supprim√©
         }
       });
     }
     
     // 2. Si les attributs data-* n'ont pas fonctionn√©, rechercher par conteneurs parents
     if (!result.participantImage || !result.representativeImage) {
-      console.log('üîç [DEBUG] Recherche de signatures par conteneurs parents');
+      // console.log('üîç [DEBUG] Recherche de signatures par conteneurs parents'); // Log supprim√©
       
       // Rechercher les conteneurs de signature
       const participantContainer = pdfContentRef.current.querySelector('[data-signature-container="participant"]');
@@ -1660,7 +1348,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         const img = participantContainer.querySelector('img');
         if (img) {
           result.participantImage = img as HTMLImageElement;
-          console.log('‚úÖ [DEBUG] Image de signature du participant trouv√©e par conteneur parent');
+          // console.log('‚úÖ [DEBUG] Image de signature du participant trouv√©e par conteneur parent'); // Log supprim√©
         }
       }
       
@@ -1668,18 +1356,18 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         const img = representativeContainer.querySelector('img');
         if (img) {
           result.representativeImage = img as HTMLImageElement;
-          console.log('‚úÖ [DEBUG] Image de signature du repr√©sentant trouv√©e par conteneur parent');
+          // console.log('‚úÖ [DEBUG] Image de signature du repr√©sentant trouv√©e par conteneur parent'); // Log supprim√©
         }
       }
     }
     
     // 3. Si aucune image n'a √©t√© trouv√©e, utiliser une m√©thode moins pr√©cise
     if (!result.participantImage && !result.representativeImage) {
-      console.log('‚ö†Ô∏è [DEBUG] Aucune signature trouv√©e avec les m√©thodes pr√©cises, utilisation d\'heuristiques');
+      // console.log('‚ö†Ô∏è [DEBUG] Aucune signature trouv√©e avec les m√©thodes pr√©cises, utilisation d\'heuristiques'); // Log supprim√©
       
       // Rechercher toutes les images du document
       const allImages = pdfContentRef.current.querySelectorAll('img');
-      console.log(`üîç [DEBUG] ${allImages.length} images trouv√©es au total dans le document`);
+      // console.log(`üîç [DEBUG] ${allImages.length} images trouv√©es au total dans le document`); // Log supprim√©
       
       allImages.forEach((img) => {
         const imgEl = img as HTMLImageElement;
@@ -1688,20 +1376,20 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         // Analyser l'URL pour d√©terminer le type de signature
         if (src.includes('participant_convention') && !result.participantImage) {
           result.participantImage = imgEl;
-          console.log('‚úÖ [DEBUG] Image de signature du participant trouv√©e par heuristique URL');
+          // console.log('‚úÖ [DEBUG] Image de signature du participant trouv√©e par heuristique URL'); // Log supprim√©
         } else if ((src.includes('representative_convention') || 
                    src.includes('trainer_convention')) && 
                   !result.representativeImage) {
           result.representativeImage = imgEl;
-          console.log('‚úÖ [DEBUG] Image de signature du repr√©sentant trouv√©e par heuristique URL');
+          // console.log('‚úÖ [DEBUG] Image de signature du repr√©sentant trouv√©e par heuristique URL'); // Log supprim√©
         }
       });
     }
     
     // R√©sum√© final
-    console.log('üîç [DEBUG] R√©capitulatif des signatures trouv√©es:');
-    console.log('- Participant:', result.participantImage ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e');
-    console.log('- Repr√©sentant:', result.representativeImage ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e');
+    // console.log('üîç [DEBUG] R√©capitulatif des signatures trouv√©es:'); // Log supprim√©
+    // console.log('- Participant:', result.participantImage ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e'); // Log supprim√©
+    // console.log('- Repr√©sentant:', result.representativeImage ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e'); // Log supprim√©
     
     return result;
   };
@@ -1711,34 +1399,14 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
 
   // Journaux pour le d√©bogage des donn√©es du template
   useEffect(() => {
-    console.log('üß© [DEBUG] StudentTrainingAgreement - Rendu principal du template avec:', {
-      'company complet': company,
-      'a-t-on une entreprise': !!company,
-      'props participant': participant,
-      'a-t-on une entreprise participant': !!participant.company 
-    });
+    // console.log('üß© [DEBUG] StudentTrainingAgreement - Rendu principal du template avec:', { // Log supprim√©
+    //   'company complet': company,
+    //   'a-t-on une entreprise': !!company,
+    //   'props participant': participant,
+    //   'a-t-on une entreprise participant': !!participant.company
+    // });
   }, [company, participant]);
 
-  // D√©finition de l'objet trainingAgreement pour centraliser les informations de signature
-  useEffect(() => {
-    // Cr√©ation de l'objet trainingAgreement qui stocke toutes les signatures
-    const trainingAgreementData = {
-      signatures: {
-        participant: participantSignature,
-        companySeal: companySeal,
-        organizationSeal: organizationSeal,
-        trainer: null,          // Peut √™tre d√©fini si n√©cessaire
-        representative: null    // Peut √™tre d√©fini si n√©cessaire
-      }
-    };
-
-    // Stockage dans une variable accessible aux autres effets
-    // @ts-ignore - Nous d√©finissons la variable globalement pour qu'elle soit accessible aux autres effets
-    window.trainingAgreement = trainingAgreementData;
-    
-    console.log('üîÑ [DEBUG] trainingAgreement mis √† jour:', trainingAgreementData);
-  }, [participantSignature, companySeal, organizationSeal]);
-
   // Effet pour g√©rer l'insertion des tampons qui n'apparaissent pas correctement
   useEffect(() => {
     if (!companySeal && !organizationSeal) return;
@@ -1747,7 +1415,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
     const checkAndFixSeal = () => {
       // Limiter √† 2 tentatives maximum pour √©viter les boucles infinies
       if (sealAttemptsRef.current >= 2) {
-        console.log('üîç [INFO] Nombre maximum de tentatives atteint pour corriger l\'affichage du tampon');
+        // console.log('üîç [INFO] Nombre maximum de tentatives atteint pour corriger l\'affichage du tampon'); // Log supprim√©
       return;
     }
 
@@ -1756,10 +1424,10 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
       if (companySeal) {
         const companySealDisplayed = document.querySelector('.company-seal img, [data-seal-container="company"] img');
         if (!companySealDisplayed) {
-          console.log(`üîç [WARN] Le tampon n'est pas correctement affich√© apr√®s enregistrement (tentative ${sealAttemptsRef.current}/2)`);
-          forceSealDisplay();
+          // console.log(`üîç [WARN] Le tampon n'est pas correctement affich√© apr√®s enregistrement (tentative ${sealAttemptsRef.current}/2)`); // Log supprim√©
+          // forceSealDisplay(); // Supprimer cet appel car la fonction n'existe plus
         } else {
-          console.log('‚úÖ [SUCCESS] Tampon correctement affich√© apr√®s correction');
+          // console.log('‚úÖ [SUCCESS] Tampon correctement affich√© apr√®s correction'); // Log supprim√©
         }
       }
     };
@@ -1775,36 +1443,30 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
     };
   }, [companySeal, organizationSeal]);
 
-  // Ajouter un effet pour mettre √† jour automatiquement le cache quand les signatures changent
-  useEffect(() => {
-    log('üîÑ', '[AUTO_CACHE]', 'Mise √† jour automatique du cache suite √† modification des signatures');
-    updateSignatureCache();
-  }, [participantSignature, companySeal, organizationSeal, updateSignatureCache]);
-
   // S'assurer que l'√©tat initial est correctement initialis√© √† partir du cache
   useEffect(() => {
     if (initialSignatures.participantSig || initialSignatures.companySeal || initialSignatures.trainerSig) {
-      console.log('üîÑ [INIT] Initialisation des signatures depuis le cache:');
+      // console.log('üîÑ [INIT] Initialisation des signatures depuis le cache:'); // Log supprim√©
       
       if (initialSignatures.participantSig) {
-        console.log('‚úÖ [INIT] Signature participant trouv√©e dans le cache');
+        // console.log('‚úÖ [INIT] Signature participant trouv√©e dans le cache'); // Log supprim√©
         safeSetParticipantSignature(initialSignatures.participantSig);
         setIsSigned(true);
         setHasParticipantSignature(true);
       }
       
       if (initialSignatures.companySeal) {
-        console.log('‚úÖ [INIT] Tampon entreprise trouv√© dans le cache');
+        // console.log('‚úÖ [INIT] Tampon entreprise trouv√© dans le cache'); // Log supprim√©
         safeSetCompanySeal(initialSignatures.companySeal);
       }
       
       if (initialSignatures.organizationSeal) {
-        console.log('‚úÖ [INIT] Tampon organisme trouv√© dans le cache');
+        // console.log('‚úÖ [INIT] Tampon organisme trouv√© dans le cache'); // Log supprim√©
         setOrganizationSeal(initialSignatures.organizationSeal);
       }
       
       if (initialSignatures.trainerSig) {
-        console.log('‚úÖ [INIT] Signature formateur trouv√©e dans le cache');
+        // console.log('‚úÖ [INIT] Signature formateur trouv√©e dans le cache'); // Log supprim√©
         safeSetTrainerSignature(initialSignatures.trainerSig);
       }
       
@@ -1833,39 +1495,63 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
     window.addEventListener('beforeunload', preventUnload);
     
     try {
-      console.log(`üîç [SAVE] Sauvegarde du ${type === 'companySeal' ? 'tampon' : 'signature'} dans DocumentManager`);
-      
+      // console.log(`üîç [SAVE] Sauvegarde du ${type === 'companySeal' ? 'tampon' : 'signature'} dans DocumentManager`); // Log supprim√©
+
+      // D√©terminer le type de signature (repr√©sentant pour les conventions)
+      const signatureType =
+        type === 'participant' ? 'representative' : type;
+
+      // console.log(`üîç [SAVE] Type de signature utilis√©: ${signatureType} pour un document de type convention`); // Log supprim√©
+
       // Sauvegarder l'image avec le DocumentManager
       try {
-        const correctedType = 
-          type === 'participant' ? 'participant' : type;
-        
-        console.log(`üîç [SAVE] Type de signature utilis√©: ${correctedType} pour un document de type convention`);
-        
         const signatureUrl = await DocumentManager.saveSignature({
-          training_id: training.id,
+            training_id: training.id,
           user_id: participant.id,
           signature: signatureDataUrl,
           type: 'convention',
-          signature_type: correctedType as 'participant' | 'representative' | 'trainer' | 'companySeal' | 'organizationSeal',
-          created_by: session.user.id
+          signature_type: signatureType as 'participant' | 'representative' | 'trainer' | 'companySeal' | 'organizationSeal',
+            created_by: session.user.id
         });
         
         if (!signatureUrl) {
           throw new Error(`Impossible d'obtenir l'URL de ${type === 'companySeal' ? 'tampon' : 'signature'}`);
         }
         
-        console.log(`üîç [SAVE] ${type === 'companySeal' ? 'Tampon' : 'Signature'} enregistr√©:`, signatureUrl.substring(0, 50) + '...');
+        // console.log(`üîç [SAVE] ${type === 'companySeal' ? 'Tampon' : 'Signature'} enregistr√©:`, signatureUrl.substring(0, 50) + '...'); // Log supprim√©
         
         // Anticacher l'URL
         const baseUrl = signatureUrl.split('?')[0];
         const timestamp = Date.now();
         const antiCacheUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
+
+        // Si c'est une signature de repr√©sentant, la partager avec tous les participants de la m√™me entreprise
+        if (type === 'participant' && company && company.id) {
+          try {
+            // console.log('üîÑ [SHARE] Partage de la signature...'); // Log supprim√©
+            // Importer et utiliser le service de partage
+            const { SignatureService } = await import('../utils/SignatureUtils');
+
+            const shareResult = await SignatureService.shareRepresentativeSignature(
+              training.id,
+              participant.id,
+              company.id
+            );
+
+            if (shareResult) {
+              // console.log('‚úÖ [SHARE] Signature partag√©e avec succ√®s'); // Log supprim√©
+            } else {
+              // console.warn('‚ö†Ô∏è [SHARE] Aucun partage effectu√©'); // Log supprim√©
+            }
+          } catch (shareError) {
+            // console.error('‚ùå [SHARE] ERROR', 'Erreur partage signature:', shareError); // Log supprim√©
+          }
+        }
         
         // Pr√©charger l'image avant de mettre √† jour l'interface
         const img = new Image();
         img.onload = () => {
-          console.log(`‚úÖ [SAVE] Image de ${type === 'companySeal' ? 'tampon' : 'signature'} pr√©charg√©e avec succ√®s`);
+          // console.log(`‚úÖ [SAVE] Image de ${type === 'companySeal' ? 'tampon' : 'signature'} pr√©charg√©e avec succ√®s`); // Log supprim√©
           
           // Mettre √† jour les √©tats selon le type
           if (type === 'companySeal') {
@@ -1896,20 +1582,20 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             
             // Mise √† jour du statut de signature dans la base de donn√©es
             try {
-              console.log('üîÑ [SAVE] Mise √† jour du statut de signature dans user_profiles');
+              // console.log('üîÑ [SAVE] Mise √† jour du statut de signature dans user_profiles'); // Log supprim√©
               supabase
                 .from('user_profiles')
                 .update({ has_signed_agreement: true })
                 .eq('id', participant.id)
                 .then(({ error }) => {
                   if (error) {
-                    console.error('‚ùå [SAVE] Erreur lors de la mise √† jour du statut de signature:', error);
+                    // console.error('‚ùå [SAVE] Erreur lors de la mise √† jour du statut de signature:', error); // Log supprim√©
                   } else {
-                    console.log('‚úÖ [SAVE] Statut de signature mis √† jour avec succ√®s');
+                    // console.log('‚úÖ [SAVE] Statut de signature mis √† jour avec succ√®s'); // Log supprim√©
                   }
                 });
             } catch (e) {
-              console.error('‚ùå [SAVE] Erreur inattendue lors de la mise √† jour du statut:', e);
+              // console.error('‚ùå [SAVE] Erreur inattendue lors de la mise √† jour du statut:', e); // Log supprim√©
             }
           }
           
@@ -1925,17 +1611,18 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           
           // Terminer le chargement et rafra√Æchir
           setIsSaving(false);
-          setShouldRefresh(prev => !prev);
+          // SUPPRIM√â: Rafra√Æchissement forc√©
         };
         
         img.onerror = () => {
-          console.error(`‚ùå [SAVE] Erreur de pr√©chargement de l'image de ${type === 'companySeal' ? 'tampon' : 'signature'}`);
+          // console.error(`‚ùå [SAVE] ERROR Erreur de pr√©chargement de l\'image de ${type === 'companySeal' ? 'tampon' : 'signature'}`); // Log supprim√©
           // Continuer malgr√© l'erreur
           if (type === 'companySeal') {
             safeSetCompanySeal(antiCacheUrl);
           } else {
             safeSetParticipantSignature(antiCacheUrl);
             setIsSigned(true);
+            setHasParticipantSignature(true);
           }
           
           // Mettre √† jour le cache global avec la nouvelle valeur
@@ -1953,8 +1640,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         // D√©clencher le chargement
         img.src = antiCacheUrl;
       } catch (saveError) {
-        console.error(`üîç [SAVE] Erreur lors de la sauvegarde:`, saveError);
-        
+        // console.error(`‚ùå [SAVE] ERROR Erreur sauvegarde DocumentManager:`, saveError); // Log supprim√©
         // Mode de secours: utiliser le dataURL local
         if (type === 'companySeal') {
           safeSetCompanySeal(signatureDataUrl);
@@ -1976,7 +1662,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
         alert(`Le ${type === 'companySeal' ? 'tampon' : 'la signature'} a √©t√© enregistr√© localement, mais n'a pas pu √™tre sauvegard√© sur le serveur. Veuillez r√©essayer si n√©cessaire.`);
       }
     } catch (error) {
-      console.error(`‚ùå [SAVE] Erreur g√©n√©rale:`, error);
+      // console.error(`‚ùå [SAVE] ERROR Erreur g√©n√©rale sauvegarde:`, error); // Log supprim√©
       alert(`Une erreur est survenue lors de la sauvegarde. Veuillez r√©essayer.`);
       setIsSaving(false);
     } finally {
@@ -2017,9 +1703,9 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
                 title="Convention de formation sign√©e" 
                 className="w-full h-full min-h-[70vh] rounded-lg border border-gray-600"
                 style={{ backgroundColor: 'white' }}
-                onLoad={() => console.log('üîç [DEBUG] Document iframe loaded successfully (convention)')}
+                onLoad={() => { /* console.log('‚úÖ [IFRAME] Document iframe loaded successfully (convention)') */ }} // Log supprim√©
                 onError={() => {
-                  console.error('üîç [DEBUG] Error loading document iframe (convention)');
+                  // console.error('‚ùå [IFRAME] Error loading document iframe (convention)'); // Log supprim√©
                   setPdfError(true);
                 }}
               />
@@ -2055,14 +1741,14 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   if (showSignatureCanvas) {
     return (
       <div className="fixed inset-0 bg-gray-900 bg-opacity-80 backdrop-blur-lg flex items-center justify-center z-50 p-4">
-        <div className="bg-gray-800 rounded-xl shadow-2xl max-w-4xl w-full flex flex-col">
-          <div className="p-6 flex items-center justify-between border-b border-gray-700">
-            <h2 className="text-xl font-semibold text-white">
+        <div className="bg-white rounded-xl shadow-lg max-w-4xl w-full flex flex-col">
+          <div className="p-6 flex items-center justify-between border-b border-gray-200">
+            <h2 className="text-xl font-semibold text-gray-900">
               Signature de la convention
             </h2>
             <button
               onClick={() => setShowSignatureCanvas(false)}
-              className="text-gray-400 hover:text-white transition-colors"
+              className="text-gray-500 hover:text-gray-700 transition-colors"
               disabled={isSaving}
             >
               <X className="w-6 h-6" />
@@ -2070,7 +1756,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           </div>
           
           <div className="p-6">
-            <h3 className="font-semibold text-lg mb-4">
+            <h3 className="font-semibold text-lg mb-4 text-gray-900">
               Apposez votre signature
             </h3>
             
@@ -2099,14 +1785,14 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   if (showSealCanvas) {
     return (
       <div className="fixed inset-0 bg-gray-900 bg-opacity-80 backdrop-blur-lg flex items-center justify-center z-50 p-4">
-        <div className="bg-gray-800 rounded-xl shadow-2xl max-w-4xl w-full flex flex-col">
-          <div className="p-6 flex items-center justify-between border-b border-gray-700">
-            <h2 className="text-xl font-semibold text-white">
+        <div className="bg-white rounded-xl shadow-lg max-w-4xl w-full flex flex-col">
+          <div className="p-6 flex items-center justify-between border-b border-gray-200">
+            <h2 className="text-xl font-semibold text-gray-900">
               Tampon de l'entreprise
             </h2>
             <button
               onClick={() => setShowSealCanvas(false)}
-              className="text-gray-400 hover:text-white transition-colors"
+              className="text-gray-500 hover:text-gray-700 transition-colors"
               disabled={isSaving}
             >
               <X className="w-6 h-6" />
@@ -2114,7 +1800,7 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           </div>
           
           <div className="p-6">
-            <h3 className="font-semibold text-lg mb-4">
+            <h3 className="font-semibold text-lg mb-4 text-gray-900">
               Apposez le tampon de votre entreprise
             </h3>
             
@@ -2138,17 +1824,18 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
   }
 
   // Affichage principale de la convention (avec ou sans signature)
+  console.log('[DEBUG] Value passed to template - representativeSignature:', representativeSignature); // AJOUT: V√©rifier la valeur pass√©e
   return (
     <div className="fixed inset-0 bg-gray-900 bg-opacity-80 backdrop-blur-lg flex items-center justify-center z-50 p-4">
-      <div className="bg-gray-800 rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] flex flex-col">
-        <div className="p-6 flex items-center justify-between border-b border-gray-700">
-          <h2 className="text-xl font-semibold text-white">
+      <div className="bg-white rounded-xl shadow-lg max-w-4xl w-full max-h-[90vh] flex flex-col">
+        <div className="p-6 flex items-center justify-between border-b border-gray-200">
+          <h2 className="text-xl font-semibold text-gray-900">
             {participantSignature ? "Convention de formation sign√©e" : "Convention de formation"}
             {participantSignature && <span className="ml-2 text-sm bg-green-600 text-white px-2 py-0.5 rounded-full">Sign√©e</span>}
           </h2>
           <button
             onClick={onCancel}
-            className="text-gray-400 hover:text-white transition-colors"
+            className="text-gray-500 hover:text-gray-700 transition-colors"
           >
             <X className="w-6 h-6" />
           </button>
@@ -2167,30 +1854,8 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
             </div>
             <div id="training-agreement-template">
               <UnifiedTrainingAgreementTemplate
-                training={{
-                  id: training.id,
-                  title: training.title,
-                  duration: training.duration,
-                  location: training.location,
-                  start_date: training.start_date,
-                  end_date: training.end_date,
-                  trainer_name: training.trainer_name,
-                  trainer_details: training.trainer_id,
-                  evaluation_methods: training.evaluation_methods,
-                  tracking_methods: training.tracking_methods,
-                  pedagogical_methods: training.pedagogical_methods,
-                  material_elements: training.material_elements,
-                  objectives: training.objectives,
-                  content: training.content,
-                  price: training.price
-                }}
-                company={company || { 
-                  name: participant.company || '√Ä compl√©ter',
-                  address: '√Ä compl√©ter',
-                  postal_code: '',
-                  city: '',
-                  siret: '√Ä compl√©ter'
-                }}
+                training={training}
+                company={company || { name: '' }}
                 participant={participant ? {
                   id: participant.id,
                   first_name: participant.first_name,
@@ -2199,24 +1864,32 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
                   email: '',
                   company: participant.company
                 } : undefined}
-                participants={allTrainingParticipants.length > 0 
-                  ? allTrainingParticipants 
-                  : (participant ? [{
-                      id: participant.id,
-                      first_name: participant.first_name, 
-                      last_name: participant.last_name,
-                      job_position: participant.job_position || '',
-                      email: '',
-                      company: participant.company
-                    }] : [])}
+                participants={allTrainingParticipants}
                 participantSignature={participantSignature}
+                // AJOUT: Passer la signature du repr√©sentant
+                representativeSignature={representativeSignature}
                 companySeal={companySeal}
                 organizationSeal={organizationSeal}
                 viewContext="student"
                 pdfMode={false}
-                organizationSettings={organizationSettings || DEFAULT_ORGANIZATION_SETTINGS}
+                organizationSettings={{
+                  organization_name: organizationSettings?.organization_name || DEFAULT_ORGANIZATION_SETTINGS.organization_name,
+                  address: organizationSettings?.address || DEFAULT_ORGANIZATION_SETTINGS.address,
+                  siret: organizationSettings?.siret || DEFAULT_ORGANIZATION_SETTINGS.siret,
+                  activity_declaration_number: organizationSettings?.activity_declaration_number || DEFAULT_ORGANIZATION_SETTINGS.activity_declaration_number,
+                  representative_name: organizationSettings?.representative_name || DEFAULT_ORGANIZATION_SETTINGS.representative_name,
+                  representative_title: organizationSettings?.representative_title || DEFAULT_ORGANIZATION_SETTINGS.representative_title,
+                  city: organizationSettings?.city || DEFAULT_ORGANIZATION_SETTINGS.city,
+                  postal_code: organizationSettings?.postal_code || DEFAULT_ORGANIZATION_SETTINGS.postal_code,
+                  country: organizationSettings?.country || DEFAULT_ORGANIZATION_SETTINGS.country,
+                }}
                 trainerId={training.trainer_id}
                 trainerSignature={trainerSignature}
+                onRenderComplete={() => {
+                  // SUPPRIM√â: Log d√©taill√© ici
+                  // SUPPRIM√â: For√ßage du DOM du tampon organisme ici
+                  console.log('‚úÖ [RENDER_COMPLETE] Template rendu.');
+                }}
               />
             </div>
           </div>
@@ -2281,8 +1954,8 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
           )}
           
           <div className="flex flex-wrap gap-3">
-            {participantSignature && (
-              <>
+            {participantSignature ? (
+              // Si la convention est sign√©e, afficher un seul bouton pour t√©l√©charger/visualiser le PDF sign√©
                 <button
                   onClick={generatePDF}
                   className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg flex items-center justify-center gap-2"
@@ -2295,78 +1968,22 @@ export const StudentTrainingAgreement: React.FC<StudentTrainingAgreementProps> =
                     </>
                   ) : (
                     <>
-                      <Download className="w-5 h-5" /> T√©l√©charger (sign√©)
+                    <Download className="w-5 h-5" /> T√©l√©charger PDF
                     </>
                   )}
                 </button>
-              </>
-            )}
-            
+            ) : (
+              // Si la convention n'est pas encore sign√©e, afficher un bouton pour visualiser le PDF
             <button
               onClick={generatePDF}
-              className="bg-gray-700 hover:bg-gray-600 text-white font-medium py-2 px-6 rounded-lg flex items-center justify-center gap-2 flex-grow md:flex-grow-0"
+                className="bg-gray-700 hover:bg-gray-600 text-white font-medium py-2 px-6 rounded-lg flex items-center justify-center gap-2"
             >
               <Download className="w-5 h-5" /> Visualiser PDF
             </button>
+            )}
           </div>
         </div>
       </div>
     </div>
   );
-};
-
-// Restaurer la fonction forceSealDisplay qui a √©t√© supprim√©e par erreur
-// Fonction pour forcer l'affichage des tampons qui ne s'affichent pas correctement
-const forceSealDisplay = () => {
-  if (!companySeal) return;
-  
-  try {
-    // Limiter le nombre de tentatives pour √©viter les boucles infinies
-    if (sealAttemptsRef.current >= 2) {
-      console.log('üõë [FORCE] Nombre maximum de tentatives atteint (2), abandon');
-      return;
-    }
-    
-    // Incr√©menter le compteur de tentatives
-    sealAttemptsRef.current++;
-    
-    // Nettoyer l'URL et ajouter un unique param√®tre de timestamp
-    const baseUrl = companySeal.split('?')[0];
-    const timestamp = Date.now();
-    const cleanSealUrl = `${baseUrl}?t=${timestamp}&forcereload=true`;
-    
-    console.log('üîß [FORCE] Nettoyage de l\'URL du tampon:', cleanSealUrl);
-    
-    // Utiliser le cache d'images pour √©viter les rechargements multiples
-    if (PRELOADED_IMAGES[baseUrl]) {
-      console.log('‚úÖ [CACHE] Image d√©j√† dans le cache local, utilisation directe');
-      safeSetCompanySeal(cleanSealUrl);
-      // Mettre √† jour le cache global
-      GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {companySeal: cleanSealUrl});
-      // Rafra√Æchir le composant
-      setShouldRefresh(prev => !prev);
-      return;
-    }
-    
-    // Pr√©charger l'image
-    const img = new Image();
-    img.onload = () => {
-      console.log('‚úÖ [FORCE] Image du tampon pr√©charg√©e avec succ√®s, mise √† jour de l\'URL');
-      
-      // Ajouter au cache local d'images
-      PRELOADED_IMAGES[baseUrl] = true;
-      
-      safeSetCompanySeal(cleanSealUrl);
-      // Mettre √† jour le cache global
-      GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {companySeal: cleanSealUrl});
-      // Rafra√Æchir le composant
-      setShouldRefresh(prev => !prev);
-    };
-    img.onerror = () => {
-      console.error('‚ùå [FORCE] Erreur de pr√©chargement de l\'image du tampon');
-    };
-    img.src = cleanSealUrl;
-  } catch (error) {
-    console.error('‚ùå [FORCE] Erreur lors du for√ßage de l\'affichage du tampon:', error);
-  }
 };
\ No newline at end of file
-- 
2.39.5 (Apple Git-154)

