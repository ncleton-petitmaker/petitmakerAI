// 4. Fonction safeSetRepresentativeSignature √† ajouter pr√®s des autres fonctions safeSet
const safeSetRepresentativeSignature = useCallback((value: string | null) => {
  if (value || !signaturesLocked) {
    setRepresentativeSignature(value);
  } else {
    console.log('üîí [PROTECT] Tentative de d√©finir representativeSignature √† null bloqu√©e');
  }
}, [signaturesLocked]);

// 5. Fonction updateSignatureCache √† remplacer (vers la ligne 281)
const updateSignatureCache = (participantSig: string | null, companySeal: string | null, organizationSeal: string | null, trainerSig: string | null, representativeSig: string | null) => {
  try {
    // Mettre √† jour le cache global
    GLOBAL_SIGNATURE_CACHE.setCache(training.id, participant.id, {
      participantSig,
      companySeal,
      organizationSeal,
      trainerSig,
      representativeSig
    });
    
    // Mettre √† jour le localStorage
    const localStorageKey = `signatures_cache_${training.id}_${participant.id}`;
    const cacheData = {
      participantSig,
      companySeal,
      organizationSeal,
      trainerSig,
      representativeSig,
      timestamp: Date.now()
    };
    localStorage.setItem(localStorageKey, JSON.stringify(cacheData));
    console.log('üíæ [CACHE] Signatures mises √† jour dans le cache local');
  } catch (e) {
    console.error('‚ùå [CACHE] Erreur lors de la mise √† jour du cache:', e);
  }
}; 