// Script pour ins√©rer un enregistrement dans la table storage_buckets_manual
// Ce script utilise l'API REST de Supabase pour contourner les restrictions d'acc√®s direct
import { config } from 'dotenv';
import https from 'https';

// Charger les variables d'environnement
config();

// URL et cl√© Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://efgirjtbuzljtzpuwsue.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVmZ2lyanRidXpsanR6cHV3c3VlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDIyNTQwNCwiZXhwIjoyMDU1ODAxNDA0fQ.lk0lG2qYwyBg8PVmF5NnUvBY4tz8A0dfOiD-ptA4fTk';

// Extraction du domaine pour les requ√™tes API
const domain = supabaseUrl.replace('https://', '');

console.log('üîç URL Supabase:', supabaseUrl);
console.log('üîç Domaine:', domain);
console.log('üîç Utilisation de la cl√© de service pour les op√©rations');

// Fonction pour faire une requ√™te HTTP
function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: domain,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseKey}`,
        'apikey': supabaseKey,
        'Prefer': 'return=representation'
      }
    };

    if (data) {
      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));
    }

    const req = https.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = responseData ? JSON.parse(responseData) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: responseData
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// Fonction pour v√©rifier si la table storage_buckets_manual existe
async function checkTableExists() {
  try {
    console.log('üîç V√©rification de l\'existence de la table storage_buckets_manual...');
    
    // Utiliser l'API REST pour v√©rifier la table
    const response = await makeRequest('GET', '/rest/v1/storage_buckets_manual?limit=1');
    
    if (response.statusCode === 200) {
      console.log('‚úÖ La table storage_buckets_manual existe.');
      return true;
    } else {
      console.log('‚ùå La table storage_buckets_manual n\'existe pas ou n\'est pas accessible:', response);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la table:', error);
    return false;
  }
}

// Fonction pour ins√©rer dans la table storage_buckets_manual
async function insertManualBucket() {
  try {
    // V√©rifier si la table existe
    const tableExists = await checkTableExists();
    
    if (!tableExists) {
      console.log('‚ö†Ô∏è Veuillez ex√©cuter le script SQL create_storage_buckets_manual_table.sql avant de continuer.');
      return;
    }
    
    console.log('üîç Insertion d\'un enregistrement pour le bucket "organization-seals"...');
    
    // Donn√©es pour l'insertion
    const bucketData = {
      id: 'organization-seals',
      name: 'organization-seals',
      owner: null,
      public: true,
      file_size_limit: 5242880, // 5MB en octets
      created_at: new Date().toISOString(),
      processed: false
    };
    
    // Ins√©rer dans la table storage_buckets_manual
    const insertResponse = await makeRequest('POST', '/rest/v1/storage_buckets_manual', bucketData);
    
    if (insertResponse.statusCode === 201) {
      console.log('‚úÖ Enregistrement ins√©r√© avec succ√®s dans storage_buckets_manual:', insertResponse.data);
      console.log('‚è≥ Le trigger devrait maintenant cr√©er automatiquement le bucket dans storage.buckets');
    } else {
      console.error('‚ùå Erreur lors de l\'insertion dans storage_buckets_manual:', insertResponse);
    }
    
    // V√©rifier si le bucket a √©t√© cr√©√© (apr√®s un court d√©lai pour laisser le temps au trigger de s'ex√©cuter)
    console.log('‚è≥ Attente de 2 secondes pour laisser le trigger s\'ex√©cuter...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // V√©rifier les buckets de stockage
    const bucketsResponse = await makeRequest('GET', '/storage/v1/bucket');
    
    if (bucketsResponse.statusCode === 200) {
      const buckets = bucketsResponse.data;
      console.log('üìã Buckets existants apr√®s insertion:', buckets.map(b => b.name));
      
      if (buckets.some(b => b.name === 'organization-seals')) {
        console.log('‚úÖ Le bucket "organization-seals" a √©t√© cr√©√© avec succ√®s par le trigger!');
      } else {
        console.log('‚ö†Ô∏è Le bucket "organization-seals" n\'a pas √©t√© cr√©√© automatiquement.');
        console.log('‚ö†Ô∏è V√©rifiez les logs du serveur Supabase pour voir les erreurs potentielles du trigger.');
      }
    } else {
      console.error('‚ùå Erreur lors de la v√©rification des buckets:', bucketsResponse);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du processus:', error);
  }
}

// Ex√©cuter la fonction principale
insertManualBucket(); 